
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fcc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004154  08004154  00014154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800418c  0800418c  0002004c  2**0
                  CONTENTS
  4 .ARM          00000008  0800418c  0800418c  0001418c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004194  08004194  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004194  08004194  00014194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004198  08004198  00014198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  0800419c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002004c  2**0
                  CONTENTS
 10 .bss          0000016c  2000004c  2000004c  0002004c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001b8  200001b8  0002004c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012331  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002359  00000000  00000000  000323ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001020  00000000  00000000  00034708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f48  00000000  00000000  00035728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000207a1  00000000  00000000  00036670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012766  00000000  00000000  00056e11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cca0e  00000000  00000000  00069577  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00135f85  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000044ac  00000000  00000000  00135fd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000004c 	.word	0x2000004c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800413c 	.word	0x0800413c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000050 	.word	0x20000050
 80001c4:	0800413c 	.word	0x0800413c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <detect_key_matrix>:


uint8_t delta_t_pressed[29] = {0};
ButtonState key_state[29] = {0};
uint8_t delta_t_released[29] = {0};
uint64_t detect_key_matrix(){
 80004c0:	b5b0      	push	{r4, r5, r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
	uint64_t result = 0;
 80004c6:	f04f 0200 	mov.w	r2, #0
 80004ca:	f04f 0300 	mov.w	r3, #0
 80004ce:	e9c7 2302 	strd	r2, r3, [r7, #8]
	for(int row = 0; row < 8; row++){
 80004d2:	2300      	movs	r3, #0
 80004d4:	607b      	str	r3, [r7, #4]
 80004d6:	e065      	b.n	80005a4 <detect_key_matrix+0xe4>
		btn_table(row_set);
 80004d8:	2201      	movs	r2, #1
 80004da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004de:	4836      	ldr	r0, [pc, #216]	; (80005b8 <detect_key_matrix+0xf8>)
 80004e0:	f001 ffd2 	bl	8002488 <HAL_GPIO_WritePin>
 80004e4:	2201      	movs	r2, #1
 80004e6:	2180      	movs	r1, #128	; 0x80
 80004e8:	4834      	ldr	r0, [pc, #208]	; (80005bc <detect_key_matrix+0xfc>)
 80004ea:	f001 ffcd 	bl	8002488 <HAL_GPIO_WritePin>
 80004ee:	2201      	movs	r2, #1
 80004f0:	2108      	movs	r1, #8
 80004f2:	4832      	ldr	r0, [pc, #200]	; (80005bc <detect_key_matrix+0xfc>)
 80004f4:	f001 ffc8 	bl	8002488 <HAL_GPIO_WritePin>
 80004f8:	2201      	movs	r2, #1
 80004fa:	2104      	movs	r1, #4
 80004fc:	4830      	ldr	r0, [pc, #192]	; (80005c0 <detect_key_matrix+0x100>)
 80004fe:	f001 ffc3 	bl	8002488 <HAL_GPIO_WritePin>
 8000502:	2201      	movs	r2, #1
 8000504:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000508:	482b      	ldr	r0, [pc, #172]	; (80005b8 <detect_key_matrix+0xf8>)
 800050a:	f001 ffbd 	bl	8002488 <HAL_GPIO_WritePin>
 800050e:	2201      	movs	r2, #1
 8000510:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000514:	4828      	ldr	r0, [pc, #160]	; (80005b8 <detect_key_matrix+0xf8>)
 8000516:	f001 ffb7 	bl	8002488 <HAL_GPIO_WritePin>
 800051a:	2201      	movs	r2, #1
 800051c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000520:	4825      	ldr	r0, [pc, #148]	; (80005b8 <detect_key_matrix+0xf8>)
 8000522:	f001 ffb1 	bl	8002488 <HAL_GPIO_WritePin>
 8000526:	2201      	movs	r2, #1
 8000528:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800052c:	4825      	ldr	r0, [pc, #148]	; (80005c4 <detect_key_matrix+0x104>)
 800052e:	f001 ffab 	bl	8002488 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_row_Port[row],BTN_row_Pin[row],0);
 8000532:	4a25      	ldr	r2, [pc, #148]	; (80005c8 <detect_key_matrix+0x108>)
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800053a:	4a24      	ldr	r2, [pc, #144]	; (80005cc <detect_key_matrix+0x10c>)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000542:	2200      	movs	r2, #0
 8000544:	4619      	mov	r1, r3
 8000546:	f001 ff9f 	bl	8002488 <HAL_GPIO_WritePin>
		for(int col = 0; col < 8; col++){
 800054a:	2300      	movs	r3, #0
 800054c:	603b      	str	r3, [r7, #0]
 800054e:	e023      	b.n	8000598 <detect_key_matrix+0xd8>
			if(!HAL_GPIO_ReadPin(BTN_col_Port[col],BTN_col_Pin[col])){
 8000550:	4a1f      	ldr	r2, [pc, #124]	; (80005d0 <detect_key_matrix+0x110>)
 8000552:	683b      	ldr	r3, [r7, #0]
 8000554:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000558:	491e      	ldr	r1, [pc, #120]	; (80005d4 <detect_key_matrix+0x114>)
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000560:	4619      	mov	r1, r3
 8000562:	4610      	mov	r0, r2
 8000564:	f001 ff78 	bl	8002458 <HAL_GPIO_ReadPin>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d111      	bne.n	8000592 <detect_key_matrix+0xd2>
				result = result | 1 << (row*8+col);
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	00da      	lsls	r2, r3, #3
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	4413      	add	r3, r2
 8000576:	2201      	movs	r2, #1
 8000578:	fa02 f303 	lsl.w	r3, r2, r3
 800057c:	461a      	mov	r2, r3
 800057e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000582:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000586:	ea40 0402 	orr.w	r4, r0, r2
 800058a:	ea41 0503 	orr.w	r5, r1, r3
 800058e:	e9c7 4502 	strd	r4, r5, [r7, #8]
		for(int col = 0; col < 8; col++){
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	3301      	adds	r3, #1
 8000596:	603b      	str	r3, [r7, #0]
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	2b07      	cmp	r3, #7
 800059c:	ddd8      	ble.n	8000550 <detect_key_matrix+0x90>
	for(int row = 0; row < 8; row++){
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	3301      	adds	r3, #1
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2b07      	cmp	r3, #7
 80005a8:	dd96      	ble.n	80004d8 <detect_key_matrix+0x18>
			}
		}
	}
	return result;
 80005aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 80005ae:	4610      	mov	r0, r2
 80005b0:	4619      	mov	r1, r3
 80005b2:	3710      	adds	r7, #16
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bdb0      	pop	{r4, r5, r7, pc}
 80005b8:	40020800 	.word	0x40020800
 80005bc:	40020400 	.word	0x40020400
 80005c0:	40020c00 	.word	0x40020c00
 80005c4:	40020000 	.word	0x40020000
 80005c8:	20000000 	.word	0x20000000
 80005cc:	08004154 	.word	0x08004154
 80005d0:	20000020 	.word	0x20000020
 80005d4:	08004164 	.word	0x08004164

080005d8 <beeper_high>:
	uint32_t knob_reading = 0;
	HAL_ADC_PollForConversion(&hadc1, 100);
	knob_reading = HAL_ADC_GetValue(&hadc1);
	return knob_reading/1.0;
}
void beeper_high(){
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0

	  TIM3->ARR = 1000;    //set the timer1 auto-reload counter
 80005dc:	4b07      	ldr	r3, [pc, #28]	; (80005fc <beeper_high+0x24>)
 80005de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005e2:	62da      	str	r2, [r3, #44]	; 0x2c
	  TIM3->PSC = 120;    //set the timer1 prescaler value
 80005e4:	4b05      	ldr	r3, [pc, #20]	; (80005fc <beeper_high+0x24>)
 80005e6:	2278      	movs	r2, #120	; 0x78
 80005e8:	629a      	str	r2, [r3, #40]	; 0x28
	  TIM3->CCR1 = 500; //set the compare value of timer1 channel1
 80005ea:	4b04      	ldr	r3, [pc, #16]	; (80005fc <beeper_high+0x24>)
 80005ec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005f0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80005f2:	bf00      	nop
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	40000400 	.word	0x40000400

08000600 <beeper_low>:
void beeper_low(){
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0

	  TIM3->ARR = 1000;    //set the timer1 auto-reload counter
 8000604:	4b07      	ldr	r3, [pc, #28]	; (8000624 <beeper_low+0x24>)
 8000606:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800060a:	62da      	str	r2, [r3, #44]	; 0x2c
	  TIM3->PSC = 168;    //set the timer1 prescaler value
 800060c:	4b05      	ldr	r3, [pc, #20]	; (8000624 <beeper_low+0x24>)
 800060e:	22a8      	movs	r2, #168	; 0xa8
 8000610:	629a      	str	r2, [r3, #40]	; 0x28
	  TIM3->CCR1 = 500; //set the compare value of timer1 channel1
 8000612:	4b04      	ldr	r3, [pc, #16]	; (8000624 <beeper_low+0x24>)
 8000614:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000618:	635a      	str	r2, [r3, #52]	; 0x34
}
 800061a:	bf00      	nop
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	40000400 	.word	0x40000400

08000628 <beeper_off>:
void beeper_off(){
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0

	  TIM3->ARR = 1000;    //set the timer1 auto-reload counter
 800062c:	4b07      	ldr	r3, [pc, #28]	; (800064c <beeper_off+0x24>)
 800062e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000632:	62da      	str	r2, [r3, #44]	; 0x2c
	  TIM3->PSC = 84;    //set the timer1 prescaler value
 8000634:	4b05      	ldr	r3, [pc, #20]	; (800064c <beeper_off+0x24>)
 8000636:	2254      	movs	r2, #84	; 0x54
 8000638:	629a      	str	r2, [r3, #40]	; 0x28
	  TIM3->CCR1 = 0; //set the compare value of timer1 channel1
 800063a:	4b04      	ldr	r3, [pc, #16]	; (800064c <beeper_off+0x24>)
 800063c:	2200      	movs	r2, #0
 800063e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000640:	bf00      	nop
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	40000400 	.word	0x40000400

08000650 <metronome_beeper>:
float metronome_beeper(int bpm, int idk_what_it_call){
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	6039      	str	r1, [r7, #0]
	float b2b_time = 1/(bpm/60.0f)*1000;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	ee07 3a90 	vmov	s15, r3
 8000660:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000664:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8000720 <metronome_beeper+0xd0>
 8000668:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800066c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000670:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000674:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8000724 <metronome_beeper+0xd4>
 8000678:	ee67 7a87 	vmul.f32	s15, s15, s14
 800067c:	edc7 7a03 	vstr	s15, [r7, #12]
	static uint16_t count = 0;
	static uint8_t buzz_offed = 0;
	if (HAL_GetTick() - last_ticks > b2b_time) {
 8000680:	f000 fe58 	bl	8001334 <HAL_GetTick>
 8000684:	4602      	mov	r2, r0
 8000686:	4b28      	ldr	r3, [pc, #160]	; (8000728 <metronome_beeper+0xd8>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	1ad3      	subs	r3, r2, r3
 800068c:	ee07 3a90 	vmov	s15, r3
 8000690:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000694:	ed97 7a03 	vldr	s14, [r7, #12]
 8000698:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800069c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006a0:	d521      	bpl.n	80006e6 <metronome_beeper+0x96>
		last_ticks = HAL_GetTick();
 80006a2:	f000 fe47 	bl	8001334 <HAL_GetTick>
 80006a6:	4603      	mov	r3, r0
 80006a8:	4a1f      	ldr	r2, [pc, #124]	; (8000728 <metronome_beeper+0xd8>)
 80006aa:	6013      	str	r3, [r2, #0]
		buzz_offed = 0;
 80006ac:	4b1f      	ldr	r3, [pc, #124]	; (800072c <metronome_beeper+0xdc>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	701a      	strb	r2, [r3, #0]
		if(!(count % idk_what_it_call)){
 80006b2:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <metronome_beeper+0xe0>)
 80006b4:	881b      	ldrh	r3, [r3, #0]
 80006b6:	683a      	ldr	r2, [r7, #0]
 80006b8:	fb93 f2f2 	sdiv	r2, r3, r2
 80006bc:	6839      	ldr	r1, [r7, #0]
 80006be:	fb01 f202 	mul.w	r2, r1, r2
 80006c2:	1a9b      	subs	r3, r3, r2
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d102      	bne.n	80006ce <metronome_beeper+0x7e>
			beeper_high();
 80006c8:	f7ff ff86 	bl	80005d8 <beeper_high>
 80006cc:	e001      	b.n	80006d2 <metronome_beeper+0x82>
		}else{
			beeper_low();
 80006ce:	f7ff ff97 	bl	8000600 <beeper_low>
		}
		count++;
 80006d2:	4b17      	ldr	r3, [pc, #92]	; (8000730 <metronome_beeper+0xe0>)
 80006d4:	881b      	ldrh	r3, [r3, #0]
 80006d6:	3301      	adds	r3, #1
 80006d8:	b29a      	uxth	r2, r3
 80006da:	4b15      	ldr	r3, [pc, #84]	; (8000730 <metronome_beeper+0xe0>)
 80006dc:	801a      	strh	r2, [r3, #0]
		gpio_toggle(LED2);
 80006de:	2180      	movs	r1, #128	; 0x80
 80006e0:	4814      	ldr	r0, [pc, #80]	; (8000734 <metronome_beeper+0xe4>)
 80006e2:	f001 feea 	bl	80024ba <HAL_GPIO_TogglePin>
	}
	if(HAL_GetTick() - last_ticks > 5 && !buzz_offed){
 80006e6:	f000 fe25 	bl	8001334 <HAL_GetTick>
 80006ea:	4602      	mov	r2, r0
 80006ec:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <metronome_beeper+0xd8>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	1ad3      	subs	r3, r2, r3
 80006f2:	2b05      	cmp	r3, #5
 80006f4:	d90d      	bls.n	8000712 <metronome_beeper+0xc2>
 80006f6:	4b0d      	ldr	r3, [pc, #52]	; (800072c <metronome_beeper+0xdc>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d109      	bne.n	8000712 <metronome_beeper+0xc2>
		beeper_off();
 80006fe:	f7ff ff93 	bl	8000628 <beeper_off>
		buzz_offed = 1;
 8000702:	4b0a      	ldr	r3, [pc, #40]	; (800072c <metronome_beeper+0xdc>)
 8000704:	2201      	movs	r2, #1
 8000706:	701a      	strb	r2, [r3, #0]
		last_ticks = HAL_GetTick();
 8000708:	f000 fe14 	bl	8001334 <HAL_GetTick>
 800070c:	4603      	mov	r3, r0
 800070e:	4a06      	ldr	r2, [pc, #24]	; (8000728 <metronome_beeper+0xd8>)
 8000710:	6013      	str	r3, [r2, #0]
	}
}
 8000712:	bf00      	nop
 8000714:	eeb0 0a67 	vmov.f32	s0, s15
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	42700000 	.word	0x42700000
 8000724:	447a0000 	.word	0x447a0000
 8000728:	200001b0 	.word	0x200001b0
 800072c:	2000006c 	.word	0x2000006c
 8000730:	2000006e 	.word	0x2000006e
 8000734:	40020000 	.word	0x40020000

08000738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000738:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800073c:	b084      	sub	sp, #16
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000740:	f000 fd92 	bl	8001268 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000744:	f000 f880 	bl	8000848 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000748:	f000 fa4c 	bl	8000be4 <MX_GPIO_Init>
  MX_ADC1_Init();
 800074c:	f000 f8e6 	bl	800091c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000750:	f000 fa16 	bl	8000b80 <MX_USART1_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000754:	f000 fa3e 	bl	8000bd4 <MX_USB_OTG_HS_USB_Init>
  MX_DAC_Init();
 8000758:	f000 f932 	bl	80009c0 <MX_DAC_Init>
  MX_TIM3_Init();
 800075c:	f000 f99a 	bl	8000a94 <MX_TIM3_Init>
  MX_SPI2_Init();
 8000760:	f000 f962 	bl	8000a28 <MX_SPI2_Init>
//  HAL_ADC_Start(&hadc1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  TIM3->ARR = 1000;    //set the timer1 auto-reload counter
 8000764:	4b32      	ldr	r3, [pc, #200]	; (8000830 <main+0xf8>)
 8000766:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800076a:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM3->PSC = 84;    //set the timer1 prescaler value
 800076c:	4b30      	ldr	r3, [pc, #192]	; (8000830 <main+0xf8>)
 800076e:	2254      	movs	r2, #84	; 0x54
 8000770:	629a      	str	r2, [r3, #40]	; 0x28
  TIM3->CCR1 = 500; //set the compare value of timer1 channel1
 8000772:	4b2f      	ldr	r3, [pc, #188]	; (8000830 <main+0xf8>)
 8000774:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000778:	635a      	str	r2, [r3, #52]	; 0x34
  uint64_t btn_matrix = 0;
 800077a:	f04f 0200 	mov.w	r2, #0
 800077e:	f04f 0300 	mov.w	r3, #0
 8000782:	e9c7 2302 	strd	r2, r3, [r7, #8]
  uint8_t last_btn = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	71fb      	strb	r3, [r7, #7]
  float volume = 0;
 800078a:	f04f 0300 	mov.w	r3, #0
 800078e:	603b      	str	r3, [r7, #0]
//  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);//too noist
  last_ticks = HAL_GetTick();
 8000790:	f000 fdd0 	bl	8001334 <HAL_GetTick>
 8000794:	4603      	mov	r3, r0
 8000796:	4a27      	ldr	r2, [pc, #156]	; (8000834 <main+0xfc>)
 8000798:	6013      	str	r3, [r2, #0]
  while (1)
  {

	metronome_beeper(80, 3);
 800079a:	2103      	movs	r1, #3
 800079c:	2050      	movs	r0, #80	; 0x50
 800079e:	f7ff ff57 	bl	8000650 <metronome_beeper>
	btn_matrix = detect_key_matrix();
 80007a2:	f7ff fe8d 	bl	80004c0 <detect_key_matrix>
 80007a6:	e9c7 0102 	strd	r0, r1, [r7, #8]
	if(read_key_matrix(BTN_1_U)){
 80007aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80007ae:	f04f 0040 	mov.w	r0, #64	; 0x40
 80007b2:	f04f 0100 	mov.w	r1, #0
 80007b6:	ea02 0400 	and.w	r4, r2, r0
 80007ba:	ea03 0501 	and.w	r5, r3, r1
 80007be:	ea54 0305 	orrs.w	r3, r4, r5
 80007c2:	d005      	beq.n	80007d0 <main+0x98>
		gpio_reset(LED0);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2101      	movs	r1, #1
 80007c8:	481b      	ldr	r0, [pc, #108]	; (8000838 <main+0x100>)
 80007ca:	f001 fe5d 	bl	8002488 <HAL_GPIO_WritePin>
 80007ce:	e004      	b.n	80007da <main+0xa2>
	}else{
		gpio_set(LED0);
 80007d0:	2201      	movs	r2, #1
 80007d2:	2101      	movs	r1, #1
 80007d4:	4818      	ldr	r0, [pc, #96]	; (8000838 <main+0x100>)
 80007d6:	f001 fe57 	bl	8002488 <HAL_GPIO_WritePin>
	}if(read_key_matrix(BTN_1_D)){
 80007da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80007de:	f04f 0080 	mov.w	r0, #128	; 0x80
 80007e2:	f04f 0100 	mov.w	r1, #0
 80007e6:	ea02 0800 	and.w	r8, r2, r0
 80007ea:	ea03 0901 	and.w	r9, r3, r1
 80007ee:	ea58 0309 	orrs.w	r3, r8, r9
 80007f2:	d005      	beq.n	8000800 <main+0xc8>
		gpio_reset(LED1);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2110      	movs	r1, #16
 80007f8:	4810      	ldr	r0, [pc, #64]	; (800083c <main+0x104>)
 80007fa:	f001 fe45 	bl	8002488 <HAL_GPIO_WritePin>
 80007fe:	e004      	b.n	800080a <main+0xd2>
	}else{
		gpio_set(LED1);
 8000800:	2201      	movs	r2, #1
 8000802:	2110      	movs	r1, #16
 8000804:	480d      	ldr	r0, [pc, #52]	; (800083c <main+0x104>)
 8000806:	f001 fe3f 	bl	8002488 <HAL_GPIO_WritePin>
	}
//	  gpio_toggle(LED2);
//	  delay(499);
//	volume = get_volume();
		HAL_ADC_Start(&hadc1);
 800080a:	480d      	ldr	r0, [pc, #52]	; (8000840 <main+0x108>)
 800080c:	f000 fde2 	bl	80013d4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000810:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000814:	480a      	ldr	r0, [pc, #40]	; (8000840 <main+0x108>)
 8000816:	f000 fee2 	bl	80015de <HAL_ADC_PollForConversion>
		raw = HAL_ADC_GetValue(&hadc1);
 800081a:	4809      	ldr	r0, [pc, #36]	; (8000840 <main+0x108>)
 800081c:	f001 f8ab 	bl	8001976 <HAL_ADC_GetValue>
 8000820:	4603      	mov	r3, r0
 8000822:	4a08      	ldr	r2, [pc, #32]	; (8000844 <main+0x10c>)
 8000824:	6013      	str	r3, [r2, #0]
		HAL_ADC_Stop(&hadc1);
 8000826:	4806      	ldr	r0, [pc, #24]	; (8000840 <main+0x108>)
 8000828:	f000 fea6 	bl	8001578 <HAL_ADC_Stop>
	metronome_beeper(80, 3);
 800082c:	e7b5      	b.n	800079a <main+0x62>
 800082e:	bf00      	nop
 8000830:	40000400 	.word	0x40000400
 8000834:	200001b0 	.word	0x200001b0
 8000838:	40020400 	.word	0x40020400
 800083c:	40020800 	.word	0x40020800
 8000840:	20000110 	.word	0x20000110
 8000844:	20000068 	.word	0x20000068

08000848 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b094      	sub	sp, #80	; 0x50
 800084c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084e:	f107 0320 	add.w	r3, r7, #32
 8000852:	2230      	movs	r2, #48	; 0x30
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f003 fc68 	bl	800412c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800085c:	f107 030c 	add.w	r3, r7, #12
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800086c:	2300      	movs	r3, #0
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	4b28      	ldr	r3, [pc, #160]	; (8000914 <SystemClock_Config+0xcc>)
 8000872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000874:	4a27      	ldr	r2, [pc, #156]	; (8000914 <SystemClock_Config+0xcc>)
 8000876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800087a:	6413      	str	r3, [r2, #64]	; 0x40
 800087c:	4b25      	ldr	r3, [pc, #148]	; (8000914 <SystemClock_Config+0xcc>)
 800087e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000888:	2300      	movs	r3, #0
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	4b22      	ldr	r3, [pc, #136]	; (8000918 <SystemClock_Config+0xd0>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a21      	ldr	r2, [pc, #132]	; (8000918 <SystemClock_Config+0xd0>)
 8000892:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000896:	6013      	str	r3, [r2, #0]
 8000898:	4b1f      	ldr	r3, [pc, #124]	; (8000918 <SystemClock_Config+0xd0>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008a4:	2301      	movs	r3, #1
 80008a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ae:	2302      	movs	r3, #2
 80008b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008b8:	2304      	movs	r3, #4
 80008ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80008bc:	23a8      	movs	r3, #168	; 0xa8
 80008be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008c0:	2302      	movs	r3, #2
 80008c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008c4:	2307      	movs	r3, #7
 80008c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c8:	f107 0320 	add.w	r3, r7, #32
 80008cc:	4618      	mov	r0, r3
 80008ce:	f001 fe0f 	bl	80024f0 <HAL_RCC_OscConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008d8:	f000 fa7c 	bl	8000dd4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008dc:	230f      	movs	r3, #15
 80008de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e0:	2302      	movs	r3, #2
 80008e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008f4:	f107 030c 	add.w	r3, r7, #12
 80008f8:	2105      	movs	r1, #5
 80008fa:	4618      	mov	r0, r3
 80008fc:	f002 f870 	bl	80029e0 <HAL_RCC_ClockConfig>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000906:	f000 fa65 	bl	8000dd4 <Error_Handler>
  }
}
 800090a:	bf00      	nop
 800090c:	3750      	adds	r7, #80	; 0x50
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40023800 	.word	0x40023800
 8000918:	40007000 	.word	0x40007000

0800091c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000922:	463b      	mov	r3, r7
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800092e:	4b21      	ldr	r3, [pc, #132]	; (80009b4 <MX_ADC1_Init+0x98>)
 8000930:	4a21      	ldr	r2, [pc, #132]	; (80009b8 <MX_ADC1_Init+0x9c>)
 8000932:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000934:	4b1f      	ldr	r3, [pc, #124]	; (80009b4 <MX_ADC1_Init+0x98>)
 8000936:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800093a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800093c:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <MX_ADC1_Init+0x98>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000942:	4b1c      	ldr	r3, [pc, #112]	; (80009b4 <MX_ADC1_Init+0x98>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000948:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <MX_ADC1_Init+0x98>)
 800094a:	2201      	movs	r2, #1
 800094c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800094e:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <MX_ADC1_Init+0x98>)
 8000950:	2200      	movs	r2, #0
 8000952:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000956:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <MX_ADC1_Init+0x98>)
 8000958:	2200      	movs	r2, #0
 800095a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800095c:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <MX_ADC1_Init+0x98>)
 800095e:	4a17      	ldr	r2, [pc, #92]	; (80009bc <MX_ADC1_Init+0xa0>)
 8000960:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000962:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <MX_ADC1_Init+0x98>)
 8000964:	2200      	movs	r2, #0
 8000966:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <MX_ADC1_Init+0x98>)
 800096a:	2201      	movs	r2, #1
 800096c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800096e:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <MX_ADC1_Init+0x98>)
 8000970:	2200      	movs	r2, #0
 8000972:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000976:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <MX_ADC1_Init+0x98>)
 8000978:	2201      	movs	r2, #1
 800097a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800097c:	480d      	ldr	r0, [pc, #52]	; (80009b4 <MX_ADC1_Init+0x98>)
 800097e:	f000 fce5 	bl	800134c <HAL_ADC_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000988:	f000 fa24 	bl	8000dd4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800098c:	2301      	movs	r3, #1
 800098e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000990:	2301      	movs	r3, #1
 8000992:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000994:	2300      	movs	r3, #0
 8000996:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000998:	463b      	mov	r3, r7
 800099a:	4619      	mov	r1, r3
 800099c:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_ADC1_Init+0x98>)
 800099e:	f001 f815 	bl	80019cc <HAL_ADC_ConfigChannel>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80009a8:	f000 fa14 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009ac:	bf00      	nop
 80009ae:	3710      	adds	r7, #16
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000110 	.word	0x20000110
 80009b8:	40012000 	.word	0x40012000
 80009bc:	0f000001 	.word	0x0f000001

080009c0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80009c6:	463b      	mov	r3, r7
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80009ce:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <MX_DAC_Init+0x60>)
 80009d0:	4a14      	ldr	r2, [pc, #80]	; (8000a24 <MX_DAC_Init+0x64>)
 80009d2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80009d4:	4812      	ldr	r0, [pc, #72]	; (8000a20 <MX_DAC_Init+0x60>)
 80009d6:	f001 fb32 	bl	800203e <HAL_DAC_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80009e0:	f000 f9f8 	bl	8000dd4 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80009e4:	2300      	movs	r3, #0
 80009e6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80009e8:	2300      	movs	r3, #0
 80009ea:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80009ec:	463b      	mov	r3, r7
 80009ee:	2200      	movs	r2, #0
 80009f0:	4619      	mov	r1, r3
 80009f2:	480b      	ldr	r0, [pc, #44]	; (8000a20 <MX_DAC_Init+0x60>)
 80009f4:	f001 fb45 	bl	8002082 <HAL_DAC_ConfigChannel>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80009fe:	f000 f9e9 	bl	8000dd4 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000a02:	463b      	mov	r3, r7
 8000a04:	2210      	movs	r2, #16
 8000a06:	4619      	mov	r1, r3
 8000a08:	4805      	ldr	r0, [pc, #20]	; (8000a20 <MX_DAC_Init+0x60>)
 8000a0a:	f001 fb3a 	bl	8002082 <HAL_DAC_ConfigChannel>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000a14:	f000 f9de 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000a18:	bf00      	nop
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	2000019c 	.word	0x2000019c
 8000a24:	40007400 	.word	0x40007400

08000a28 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a2c:	4b17      	ldr	r3, [pc, #92]	; (8000a8c <MX_SPI2_Init+0x64>)
 8000a2e:	4a18      	ldr	r2, [pc, #96]	; (8000a90 <MX_SPI2_Init+0x68>)
 8000a30:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a32:	4b16      	ldr	r3, [pc, #88]	; (8000a8c <MX_SPI2_Init+0x64>)
 8000a34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a38:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a3a:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <MX_SPI2_Init+0x64>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a40:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <MX_SPI2_Init+0x64>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a46:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <MX_SPI2_Init+0x64>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a4c:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <MX_SPI2_Init+0x64>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a52:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <MX_SPI2_Init+0x64>)
 8000a54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a58:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <MX_SPI2_Init+0x64>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a60:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <MX_SPI2_Init+0x64>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a66:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <MX_SPI2_Init+0x64>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a6c:	4b07      	ldr	r3, [pc, #28]	; (8000a8c <MX_SPI2_Init+0x64>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000a72:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <MX_SPI2_Init+0x64>)
 8000a74:	220a      	movs	r2, #10
 8000a76:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a78:	4804      	ldr	r0, [pc, #16]	; (8000a8c <MX_SPI2_Init+0x64>)
 8000a7a:	f002 f9ad 	bl	8002dd8 <HAL_SPI_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000a84:	f000 f9a6 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20000070 	.word	0x20000070
 8000a90:	40003800 	.word	0x40003800

08000a94 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08e      	sub	sp, #56	; 0x38
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
 8000aa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aa8:	f107 0320 	add.w	r3, r7, #32
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ab2:	1d3b      	adds	r3, r7, #4
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
 8000ac0:	615a      	str	r2, [r3, #20]
 8000ac2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ac4:	4b2c      	ldr	r3, [pc, #176]	; (8000b78 <MX_TIM3_Init+0xe4>)
 8000ac6:	4a2d      	ldr	r2, [pc, #180]	; (8000b7c <MX_TIM3_Init+0xe8>)
 8000ac8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 692-1;
 8000aca:	4b2b      	ldr	r3, [pc, #172]	; (8000b78 <MX_TIM3_Init+0xe4>)
 8000acc:	f240 22b3 	movw	r2, #691	; 0x2b3
 8000ad0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad2:	4b29      	ldr	r3, [pc, #164]	; (8000b78 <MX_TIM3_Init+0xe4>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255-1;
 8000ad8:	4b27      	ldr	r3, [pc, #156]	; (8000b78 <MX_TIM3_Init+0xe4>)
 8000ada:	22fe      	movs	r2, #254	; 0xfe
 8000adc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ade:	4b26      	ldr	r3, [pc, #152]	; (8000b78 <MX_TIM3_Init+0xe4>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae4:	4b24      	ldr	r3, [pc, #144]	; (8000b78 <MX_TIM3_Init+0xe4>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000aea:	4823      	ldr	r0, [pc, #140]	; (8000b78 <MX_TIM3_Init+0xe4>)
 8000aec:	f002 f9fd 	bl	8002eea <HAL_TIM_Base_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000af6:	f000 f96d 	bl	8000dd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000afa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000afe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b04:	4619      	mov	r1, r3
 8000b06:	481c      	ldr	r0, [pc, #112]	; (8000b78 <MX_TIM3_Init+0xe4>)
 8000b08:	f002 fc62 	bl	80033d0 <HAL_TIM_ConfigClockSource>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000b12:	f000 f95f 	bl	8000dd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b16:	4818      	ldr	r0, [pc, #96]	; (8000b78 <MX_TIM3_Init+0xe4>)
 8000b18:	f002 fa36 	bl	8002f88 <HAL_TIM_PWM_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000b22:	f000 f957 	bl	8000dd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b26:	2300      	movs	r3, #0
 8000b28:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b2e:	f107 0320 	add.w	r3, r7, #32
 8000b32:	4619      	mov	r1, r3
 8000b34:	4810      	ldr	r0, [pc, #64]	; (8000b78 <MX_TIM3_Init+0xe4>)
 8000b36:	f003 f82f 	bl	8003b98 <HAL_TIMEx_MasterConfigSynchronization>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000b40:	f000 f948 	bl	8000dd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b44:	2360      	movs	r3, #96	; 0x60
 8000b46:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	2200      	movs	r2, #0
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4807      	ldr	r0, [pc, #28]	; (8000b78 <MX_TIM3_Init+0xe4>)
 8000b5c:	f002 fb76 	bl	800324c <HAL_TIM_PWM_ConfigChannel>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000b66:	f000 f935 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b6a:	4803      	ldr	r0, [pc, #12]	; (8000b78 <MX_TIM3_Init+0xe4>)
 8000b6c:	f000 fa80 	bl	8001070 <HAL_TIM_MspPostInit>

}
 8000b70:	bf00      	nop
 8000b72:	3738      	adds	r7, #56	; 0x38
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	200000c8 	.word	0x200000c8
 8000b7c:	40000400 	.word	0x40000400

08000b80 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b84:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <MX_USART1_UART_Init+0x4c>)
 8000b86:	4a12      	ldr	r2, [pc, #72]	; (8000bd0 <MX_USART1_UART_Init+0x50>)
 8000b88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b8a:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <MX_USART1_UART_Init+0x4c>)
 8000b8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b92:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <MX_USART1_UART_Init+0x4c>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b98:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <MX_USART1_UART_Init+0x4c>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <MX_USART1_UART_Init+0x4c>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ba4:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <MX_USART1_UART_Init+0x4c>)
 8000ba6:	220c      	movs	r2, #12
 8000ba8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000baa:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <MX_USART1_UART_Init+0x4c>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <MX_USART1_UART_Init+0x4c>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bb6:	4805      	ldr	r0, [pc, #20]	; (8000bcc <MX_USART1_UART_Init+0x4c>)
 8000bb8:	f003 f87e 	bl	8003cb8 <HAL_UART_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bc2:	f000 f907 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000158 	.word	0x20000158
 8000bd0:	40011000 	.word	0x40011000

08000bd4 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
	...

08000be4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
 8000bf6:	60da      	str	r2, [r3, #12]
 8000bf8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	613b      	str	r3, [r7, #16]
 8000bfe:	4b70      	ldr	r3, [pc, #448]	; (8000dc0 <MX_GPIO_Init+0x1dc>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a6f      	ldr	r2, [pc, #444]	; (8000dc0 <MX_GPIO_Init+0x1dc>)
 8000c04:	f043 0304 	orr.w	r3, r3, #4
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b6d      	ldr	r3, [pc, #436]	; (8000dc0 <MX_GPIO_Init+0x1dc>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0304 	and.w	r3, r3, #4
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	4b69      	ldr	r3, [pc, #420]	; (8000dc0 <MX_GPIO_Init+0x1dc>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a68      	ldr	r2, [pc, #416]	; (8000dc0 <MX_GPIO_Init+0x1dc>)
 8000c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b66      	ldr	r3, [pc, #408]	; (8000dc0 <MX_GPIO_Init+0x1dc>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	60bb      	str	r3, [r7, #8]
 8000c36:	4b62      	ldr	r3, [pc, #392]	; (8000dc0 <MX_GPIO_Init+0x1dc>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a61      	ldr	r2, [pc, #388]	; (8000dc0 <MX_GPIO_Init+0x1dc>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b5f      	ldr	r3, [pc, #380]	; (8000dc0 <MX_GPIO_Init+0x1dc>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	60bb      	str	r3, [r7, #8]
 8000c4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	4b5b      	ldr	r3, [pc, #364]	; (8000dc0 <MX_GPIO_Init+0x1dc>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a5a      	ldr	r2, [pc, #360]	; (8000dc0 <MX_GPIO_Init+0x1dc>)
 8000c58:	f043 0302 	orr.w	r3, r3, #2
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b58      	ldr	r3, [pc, #352]	; (8000dc0 <MX_GPIO_Init+0x1dc>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0302 	and.w	r3, r3, #2
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	603b      	str	r3, [r7, #0]
 8000c6e:	4b54      	ldr	r3, [pc, #336]	; (8000dc0 <MX_GPIO_Init+0x1dc>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a53      	ldr	r2, [pc, #332]	; (8000dc0 <MX_GPIO_Init+0x1dc>)
 8000c74:	f043 0308 	orr.w	r3, r3, #8
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b51      	ldr	r3, [pc, #324]	; (8000dc0 <MX_GPIO_Init+0x1dc>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0308 	and.w	r3, r3, #8
 8000c82:	603b      	str	r3, [r7, #0]
 8000c84:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, row0_Pin|LED1_Pin|LED3_Pin|row6_Pin
 8000c86:	2201      	movs	r2, #1
 8000c88:	f645 4130 	movw	r1, #23600	; 0x5c30
 8000c8c:	484d      	ldr	r0, [pc, #308]	; (8000dc4 <MX_GPIO_Init+0x1e0>)
 8000c8e:	f001 fbfb 	bl	8002488 <HAL_GPIO_WritePin>
                          |row5_Pin|row4_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|USB_TRIG_Pin, GPIO_PIN_RESET);
 8000c92:	2200      	movs	r2, #0
 8000c94:	2143      	movs	r1, #67	; 0x43
 8000c96:	484b      	ldr	r0, [pc, #300]	; (8000dc4 <MX_GPIO_Init+0x1e0>)
 8000c98:	f001 fbf6 	bl	8002488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	210c      	movs	r1, #12
 8000ca0:	4849      	ldr	r0, [pc, #292]	; (8000dc8 <MX_GPIO_Init+0x1e4>)
 8000ca2:	f001 fbf1 	bl	8002488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED2_Pin|row7_Pin, GPIO_PIN_SET);
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	f248 0180 	movw	r1, #32896	; 0x8080
 8000cac:	4846      	ldr	r0, [pc, #280]	; (8000dc8 <MX_GPIO_Init+0x1e4>)
 8000cae:	f001 fbeb 	bl	8002488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|row2_Pin|row1_Pin, GPIO_PIN_SET);
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	2189      	movs	r1, #137	; 0x89
 8000cb6:	4845      	ldr	r0, [pc, #276]	; (8000dcc <MX_GPIO_Init+0x1e8>)
 8000cb8:	f001 fbe6 	bl	8002488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TFT_RES_Pin|TFT_DC_Pin|TFT_CS_Pin|GPIO_PIN_13, GPIO_PIN_RESET);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f642 0106 	movw	r1, #10246	; 0x2806
 8000cc2:	4842      	ldr	r0, [pc, #264]	; (8000dcc <MX_GPIO_Init+0x1e8>)
 8000cc4:	f001 fbe0 	bl	8002488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(row3_GPIO_Port, row3_Pin, GPIO_PIN_SET);
 8000cc8:	2201      	movs	r2, #1
 8000cca:	2104      	movs	r1, #4
 8000ccc:	4840      	ldr	r0, [pc, #256]	; (8000dd0 <MX_GPIO_Init+0x1ec>)
 8000cce:	f001 fbdb 	bl	8002488 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : col5_Pin col7_Pin */
  GPIO_InitStruct.Pin = col5_Pin|col7_Pin;
 8000cd2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000cd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4837      	ldr	r0, [pc, #220]	; (8000dc4 <MX_GPIO_Init+0x1e0>)
 8000ce8:	f001 fa1a 	bl	8002120 <HAL_GPIO_Init>

  /*Configure GPIO pins : row0_Pin PC0 PC1 LED1_Pin
                           LED3_Pin USB_TRIG_Pin row6_Pin row5_Pin
                           row4_Pin */
  GPIO_InitStruct.Pin = row0_Pin|GPIO_PIN_0|GPIO_PIN_1|LED1_Pin
 8000cec:	f645 4373 	movw	r3, #23667	; 0x5c73
 8000cf0:	617b      	str	r3, [r7, #20]
                          |LED3_Pin|USB_TRIG_Pin|row6_Pin|row5_Pin
                          |row4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cfe:	f107 0314 	add.w	r3, r7, #20
 8000d02:	4619      	mov	r1, r3
 8000d04:	482f      	ldr	r0, [pc, #188]	; (8000dc4 <MX_GPIO_Init+0x1e0>)
 8000d06:	f001 fa0b 	bl	8002120 <HAL_GPIO_Init>

  /*Configure GPIO pin : col3_Pin */
  GPIO_InitStruct.Pin = col3_Pin;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d12:	2301      	movs	r3, #1
 8000d14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(col3_GPIO_Port, &GPIO_InitStruct);
 8000d16:	f107 0314 	add.w	r3, r7, #20
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	482a      	ldr	r0, [pc, #168]	; (8000dc8 <MX_GPIO_Init+0x1e4>)
 8000d1e:	f001 f9ff 	bl	8002120 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 LED2_Pin row7_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|LED2_Pin|row7_Pin;
 8000d22:	f248 038c 	movw	r3, #32908	; 0x808c
 8000d26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d30:	2300      	movs	r3, #0
 8000d32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4823      	ldr	r0, [pc, #140]	; (8000dc8 <MX_GPIO_Init+0x1e4>)
 8000d3c:	f001 f9f0 	bl	8002120 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin TFT_RES_Pin TFT_DC_Pin TFT_CS_Pin
                           PB13 row2_Pin row1_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|TFT_RES_Pin|TFT_DC_Pin|TFT_CS_Pin
 8000d40:	f642 038f 	movw	r3, #10383	; 0x288f
 8000d44:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|row2_Pin|row1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d46:	2301      	movs	r3, #1
 8000d48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d52:	f107 0314 	add.w	r3, r7, #20
 8000d56:	4619      	mov	r1, r3
 8000d58:	481c      	ldr	r0, [pc, #112]	; (8000dcc <MX_GPIO_Init+0x1e8>)
 8000d5a:	f001 f9e1 	bl	8002120 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d5e:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000d62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d64:	2302      	movs	r3, #2
 8000d66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000d70:	230c      	movs	r3, #12
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4814      	ldr	r0, [pc, #80]	; (8000dcc <MX_GPIO_Init+0x1e8>)
 8000d7c:	f001 f9d0 	bl	8002120 <HAL_GPIO_Init>

  /*Configure GPIO pin : row3_Pin */
  GPIO_InitStruct.Pin = row3_Pin;
 8000d80:	2304      	movs	r3, #4
 8000d82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d84:	2301      	movs	r3, #1
 8000d86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(row3_GPIO_Port, &GPIO_InitStruct);
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	4619      	mov	r1, r3
 8000d96:	480e      	ldr	r0, [pc, #56]	; (8000dd0 <MX_GPIO_Init+0x1ec>)
 8000d98:	f001 f9c2 	bl	8002120 <HAL_GPIO_Init>

  /*Configure GPIO pins : col2_Pin col4_Pin col0_Pin col1_Pin
                           col6_Pin */
  GPIO_InitStruct.Pin = col2_Pin|col4_Pin|col0_Pin|col1_Pin
 8000d9c:	f44f 735c 	mov.w	r3, #880	; 0x370
 8000da0:	617b      	str	r3, [r7, #20]
                          |col6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000da6:	2301      	movs	r3, #1
 8000da8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	4619      	mov	r1, r3
 8000db0:	4806      	ldr	r0, [pc, #24]	; (8000dcc <MX_GPIO_Init+0x1e8>)
 8000db2:	f001 f9b5 	bl	8002120 <HAL_GPIO_Init>

}
 8000db6:	bf00      	nop
 8000db8:	3728      	adds	r7, #40	; 0x28
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40020800 	.word	0x40020800
 8000dc8:	40020000 	.word	0x40020000
 8000dcc:	40020400 	.word	0x40020400
 8000dd0:	40020c00 	.word	0x40020c00

08000dd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd8:	b672      	cpsid	i
}
 8000dda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <Error_Handler+0x8>
	...

08000de0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	607b      	str	r3, [r7, #4]
 8000dea:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <HAL_MspInit+0x4c>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	4a0f      	ldr	r2, [pc, #60]	; (8000e2c <HAL_MspInit+0x4c>)
 8000df0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df4:	6453      	str	r3, [r2, #68]	; 0x44
 8000df6:	4b0d      	ldr	r3, [pc, #52]	; (8000e2c <HAL_MspInit+0x4c>)
 8000df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	603b      	str	r3, [r7, #0]
 8000e06:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <HAL_MspInit+0x4c>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	4a08      	ldr	r2, [pc, #32]	; (8000e2c <HAL_MspInit+0x4c>)
 8000e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e10:	6413      	str	r3, [r2, #64]	; 0x40
 8000e12:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <HAL_MspInit+0x4c>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e1a:	603b      	str	r3, [r7, #0]
 8000e1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	40023800 	.word	0x40023800

08000e30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	; 0x28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a1b      	ldr	r2, [pc, #108]	; (8000ebc <HAL_ADC_MspInit+0x8c>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d12f      	bne.n	8000eb2 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
 8000e56:	4b1a      	ldr	r3, [pc, #104]	; (8000ec0 <HAL_ADC_MspInit+0x90>)
 8000e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5a:	4a19      	ldr	r2, [pc, #100]	; (8000ec0 <HAL_ADC_MspInit+0x90>)
 8000e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e60:	6453      	str	r3, [r2, #68]	; 0x44
 8000e62:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <HAL_ADC_MspInit+0x90>)
 8000e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	4b13      	ldr	r3, [pc, #76]	; (8000ec0 <HAL_ADC_MspInit+0x90>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a12      	ldr	r2, [pc, #72]	; (8000ec0 <HAL_ADC_MspInit+0x90>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <HAL_ADC_MspInit+0x90>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC_vol_Pin;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_vol_GPIO_Port, &GPIO_InitStruct);
 8000e96:	f107 0314 	add.w	r3, r7, #20
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4809      	ldr	r0, [pc, #36]	; (8000ec4 <HAL_ADC_MspInit+0x94>)
 8000e9e:	f001 f93f 	bl	8002120 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	2012      	movs	r0, #18
 8000ea8:	f001 f893 	bl	8001fd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000eac:	2012      	movs	r0, #18
 8000eae:	f001 f8ac 	bl	800200a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000eb2:	bf00      	nop
 8000eb4:	3728      	adds	r7, #40	; 0x28
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40012000 	.word	0x40012000
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40020000 	.word	0x40020000

08000ec8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08a      	sub	sp, #40	; 0x28
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a17      	ldr	r2, [pc, #92]	; (8000f44 <HAL_DAC_MspInit+0x7c>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d127      	bne.n	8000f3a <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	613b      	str	r3, [r7, #16]
 8000eee:	4b16      	ldr	r3, [pc, #88]	; (8000f48 <HAL_DAC_MspInit+0x80>)
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef2:	4a15      	ldr	r2, [pc, #84]	; (8000f48 <HAL_DAC_MspInit+0x80>)
 8000ef4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8000efa:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <HAL_DAC_MspInit+0x80>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f02:	613b      	str	r3, [r7, #16]
 8000f04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	4b0f      	ldr	r3, [pc, #60]	; (8000f48 <HAL_DAC_MspInit+0x80>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a0e      	ldr	r2, [pc, #56]	; (8000f48 <HAL_DAC_MspInit+0x80>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <HAL_DAC_MspInit+0x80>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = SPEAKER_L_Pin|SPEAKER_R_Pin;
 8000f22:	2330      	movs	r3, #48	; 0x30
 8000f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f26:	2303      	movs	r3, #3
 8000f28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2e:	f107 0314 	add.w	r3, r7, #20
 8000f32:	4619      	mov	r1, r3
 8000f34:	4805      	ldr	r0, [pc, #20]	; (8000f4c <HAL_DAC_MspInit+0x84>)
 8000f36:	f001 f8f3 	bl	8002120 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000f3a:	bf00      	nop
 8000f3c:	3728      	adds	r7, #40	; 0x28
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40007400 	.word	0x40007400
 8000f48:	40023800 	.word	0x40023800
 8000f4c:	40020000 	.word	0x40020000

08000f50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08a      	sub	sp, #40	; 0x28
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a28      	ldr	r2, [pc, #160]	; (8001010 <HAL_SPI_MspInit+0xc0>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d14a      	bne.n	8001008 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
 8000f76:	4b27      	ldr	r3, [pc, #156]	; (8001014 <HAL_SPI_MspInit+0xc4>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	4a26      	ldr	r2, [pc, #152]	; (8001014 <HAL_SPI_MspInit+0xc4>)
 8000f7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f80:	6413      	str	r3, [r2, #64]	; 0x40
 8000f82:	4b24      	ldr	r3, [pc, #144]	; (8001014 <HAL_SPI_MspInit+0xc4>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f8a:	613b      	str	r3, [r7, #16]
 8000f8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	4b20      	ldr	r3, [pc, #128]	; (8001014 <HAL_SPI_MspInit+0xc4>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a1f      	ldr	r2, [pc, #124]	; (8001014 <HAL_SPI_MspInit+0xc4>)
 8000f98:	f043 0304 	orr.w	r3, r3, #4
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b1d      	ldr	r3, [pc, #116]	; (8001014 <HAL_SPI_MspInit+0xc4>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f003 0304 	and.w	r3, r3, #4
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	60bb      	str	r3, [r7, #8]
 8000fae:	4b19      	ldr	r3, [pc, #100]	; (8001014 <HAL_SPI_MspInit+0xc4>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a18      	ldr	r2, [pc, #96]	; (8001014 <HAL_SPI_MspInit+0xc4>)
 8000fb4:	f043 0302 	orr.w	r3, r3, #2
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b16      	ldr	r3, [pc, #88]	; (8001014 <HAL_SPI_MspInit+0xc4>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0302 	and.w	r3, r3, #2
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = TFT_BLK_Pin|TFT_SDA_Pin;
 8000fc6:	230c      	movs	r3, #12
 8000fc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fd6:	2305      	movs	r3, #5
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fda:	f107 0314 	add.w	r3, r7, #20
 8000fde:	4619      	mov	r1, r3
 8000fe0:	480d      	ldr	r0, [pc, #52]	; (8001018 <HAL_SPI_MspInit+0xc8>)
 8000fe2:	f001 f89d 	bl	8002120 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TFT_CLK_Pin;
 8000fe6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fec:	2302      	movs	r3, #2
 8000fee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ff8:	2305      	movs	r3, #5
 8000ffa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TFT_CLK_GPIO_Port, &GPIO_InitStruct);
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	4619      	mov	r1, r3
 8001002:	4806      	ldr	r0, [pc, #24]	; (800101c <HAL_SPI_MspInit+0xcc>)
 8001004:	f001 f88c 	bl	8002120 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001008:	bf00      	nop
 800100a:	3728      	adds	r7, #40	; 0x28
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40003800 	.word	0x40003800
 8001014:	40023800 	.word	0x40023800
 8001018:	40020800 	.word	0x40020800
 800101c:	40020400 	.word	0x40020400

08001020 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a0e      	ldr	r2, [pc, #56]	; (8001068 <HAL_TIM_Base_MspInit+0x48>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d115      	bne.n	800105e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	4b0d      	ldr	r3, [pc, #52]	; (800106c <HAL_TIM_Base_MspInit+0x4c>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	4a0c      	ldr	r2, [pc, #48]	; (800106c <HAL_TIM_Base_MspInit+0x4c>)
 800103c:	f043 0302 	orr.w	r3, r3, #2
 8001040:	6413      	str	r3, [r2, #64]	; 0x40
 8001042:	4b0a      	ldr	r3, [pc, #40]	; (800106c <HAL_TIM_Base_MspInit+0x4c>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	f003 0302 	and.w	r3, r3, #2
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800104e:	2200      	movs	r2, #0
 8001050:	2100      	movs	r1, #0
 8001052:	201d      	movs	r0, #29
 8001054:	f000 ffbd 	bl	8001fd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001058:	201d      	movs	r0, #29
 800105a:	f000 ffd6 	bl	800200a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800105e:	bf00      	nop
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40000400 	.word	0x40000400
 800106c:	40023800 	.word	0x40023800

08001070 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b088      	sub	sp, #32
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a12      	ldr	r2, [pc, #72]	; (80010d8 <HAL_TIM_MspPostInit+0x68>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d11d      	bne.n	80010ce <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	4b11      	ldr	r3, [pc, #68]	; (80010dc <HAL_TIM_MspPostInit+0x6c>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a10      	ldr	r2, [pc, #64]	; (80010dc <HAL_TIM_MspPostInit+0x6c>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <HAL_TIM_MspPostInit+0x6c>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 80010ae:	2340      	movs	r3, #64	; 0x40
 80010b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010be:	2302      	movs	r3, #2
 80010c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80010c2:	f107 030c 	add.w	r3, r7, #12
 80010c6:	4619      	mov	r1, r3
 80010c8:	4805      	ldr	r0, [pc, #20]	; (80010e0 <HAL_TIM_MspPostInit+0x70>)
 80010ca:	f001 f829 	bl	8002120 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80010ce:	bf00      	nop
 80010d0:	3720      	adds	r7, #32
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40000400 	.word	0x40000400
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40020000 	.word	0x40020000

080010e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08a      	sub	sp, #40	; 0x28
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a19      	ldr	r2, [pc, #100]	; (8001168 <HAL_UART_MspInit+0x84>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d12c      	bne.n	8001160 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
 800110a:	4b18      	ldr	r3, [pc, #96]	; (800116c <HAL_UART_MspInit+0x88>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110e:	4a17      	ldr	r2, [pc, #92]	; (800116c <HAL_UART_MspInit+0x88>)
 8001110:	f043 0310 	orr.w	r3, r3, #16
 8001114:	6453      	str	r3, [r2, #68]	; 0x44
 8001116:	4b15      	ldr	r3, [pc, #84]	; (800116c <HAL_UART_MspInit+0x88>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111a:	f003 0310 	and.w	r3, r3, #16
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	4b11      	ldr	r3, [pc, #68]	; (800116c <HAL_UART_MspInit+0x88>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a10      	ldr	r2, [pc, #64]	; (800116c <HAL_UART_MspInit+0x88>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b0e      	ldr	r3, [pc, #56]	; (800116c <HAL_UART_MspInit+0x88>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 800113e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001142:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001144:	2302      	movs	r3, #2
 8001146:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114c:	2303      	movs	r3, #3
 800114e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001150:	2307      	movs	r3, #7
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	4619      	mov	r1, r3
 800115a:	4805      	ldr	r0, [pc, #20]	; (8001170 <HAL_UART_MspInit+0x8c>)
 800115c:	f000 ffe0 	bl	8002120 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001160:	bf00      	nop
 8001162:	3728      	adds	r7, #40	; 0x28
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40011000 	.word	0x40011000
 800116c:	40023800 	.word	0x40023800
 8001170:	40020000 	.word	0x40020000

08001174 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001178:	e7fe      	b.n	8001178 <NMI_Handler+0x4>

0800117a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800117a:	b480      	push	{r7}
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800117e:	e7fe      	b.n	800117e <HardFault_Handler+0x4>

08001180 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001184:	e7fe      	b.n	8001184 <MemManage_Handler+0x4>

08001186 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001186:	b480      	push	{r7}
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800118a:	e7fe      	b.n	800118a <BusFault_Handler+0x4>

0800118c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001190:	e7fe      	b.n	8001190 <UsageFault_Handler+0x4>

08001192 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011c0:	f000 f8a4 	bl	800130c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80011cc:	4802      	ldr	r0, [pc, #8]	; (80011d8 <ADC_IRQHandler+0x10>)
 80011ce:	f000 fa91 	bl	80016f4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000110 	.word	0x20000110

080011dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80011e0:	4802      	ldr	r0, [pc, #8]	; (80011ec <TIM3_IRQHandler+0x10>)
 80011e2:	f001 ff2a 	bl	800303a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	200000c8 	.word	0x200000c8

080011f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <SystemInit+0x20>)
 80011f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011fa:	4a05      	ldr	r2, [pc, #20]	; (8001210 <SystemInit+0x20>)
 80011fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001200:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001214:	f8df d034 	ldr.w	sp, [pc, #52]	; 800124c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001218:	480d      	ldr	r0, [pc, #52]	; (8001250 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800121a:	490e      	ldr	r1, [pc, #56]	; (8001254 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800121c:	4a0e      	ldr	r2, [pc, #56]	; (8001258 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800121e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001220:	e002      	b.n	8001228 <LoopCopyDataInit>

08001222 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001222:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001224:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001226:	3304      	adds	r3, #4

08001228 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001228:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800122a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800122c:	d3f9      	bcc.n	8001222 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800122e:	4a0b      	ldr	r2, [pc, #44]	; (800125c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001230:	4c0b      	ldr	r4, [pc, #44]	; (8001260 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001232:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001234:	e001      	b.n	800123a <LoopFillZerobss>

08001236 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001236:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001238:	3204      	adds	r2, #4

0800123a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800123a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800123c:	d3fb      	bcc.n	8001236 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800123e:	f7ff ffd7 	bl	80011f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001242:	f002 ff4f 	bl	80040e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001246:	f7ff fa77 	bl	8000738 <main>
  bx  lr    
 800124a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800124c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001250:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001254:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 8001258:	0800419c 	.word	0x0800419c
  ldr r2, =_sbss
 800125c:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 8001260:	200001b8 	.word	0x200001b8

08001264 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001264:	e7fe      	b.n	8001264 <CAN1_RX0_IRQHandler>
	...

08001268 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800126c:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <HAL_Init+0x40>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a0d      	ldr	r2, [pc, #52]	; (80012a8 <HAL_Init+0x40>)
 8001272:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001276:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001278:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <HAL_Init+0x40>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a0a      	ldr	r2, [pc, #40]	; (80012a8 <HAL_Init+0x40>)
 800127e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001282:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001284:	4b08      	ldr	r3, [pc, #32]	; (80012a8 <HAL_Init+0x40>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a07      	ldr	r2, [pc, #28]	; (80012a8 <HAL_Init+0x40>)
 800128a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800128e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001290:	2003      	movs	r0, #3
 8001292:	f000 fe93 	bl	8001fbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001296:	200f      	movs	r0, #15
 8001298:	f000 f808 	bl	80012ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800129c:	f7ff fda0 	bl	8000de0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40023c00 	.word	0x40023c00

080012ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012b4:	4b12      	ldr	r3, [pc, #72]	; (8001300 <HAL_InitTick+0x54>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	4b12      	ldr	r3, [pc, #72]	; (8001304 <HAL_InitTick+0x58>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	4619      	mov	r1, r3
 80012be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ca:	4618      	mov	r0, r3
 80012cc:	f000 feab 	bl	8002026 <HAL_SYSTICK_Config>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e00e      	b.n	80012f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2b0f      	cmp	r3, #15
 80012de:	d80a      	bhi.n	80012f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012e0:	2200      	movs	r2, #0
 80012e2:	6879      	ldr	r1, [r7, #4]
 80012e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012e8:	f000 fe73 	bl	8001fd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012ec:	4a06      	ldr	r2, [pc, #24]	; (8001308 <HAL_InitTick+0x5c>)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012f2:	2300      	movs	r3, #0
 80012f4:	e000      	b.n	80012f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000040 	.word	0x20000040
 8001304:	20000048 	.word	0x20000048
 8001308:	20000044 	.word	0x20000044

0800130c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <HAL_IncTick+0x20>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	461a      	mov	r2, r3
 8001316:	4b06      	ldr	r3, [pc, #24]	; (8001330 <HAL_IncTick+0x24>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4413      	add	r3, r2
 800131c:	4a04      	ldr	r2, [pc, #16]	; (8001330 <HAL_IncTick+0x24>)
 800131e:	6013      	str	r3, [r2, #0]
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	20000048 	.word	0x20000048
 8001330:	200001b4 	.word	0x200001b4

08001334 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  return uwTick;
 8001338:	4b03      	ldr	r3, [pc, #12]	; (8001348 <HAL_GetTick+0x14>)
 800133a:	681b      	ldr	r3, [r3, #0]
}
 800133c:	4618      	mov	r0, r3
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	200001b4 	.word	0x200001b4

0800134c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001354:	2300      	movs	r3, #0
 8001356:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d101      	bne.n	8001362 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e033      	b.n	80013ca <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	2b00      	cmp	r3, #0
 8001368:	d109      	bne.n	800137e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff fd60 	bl	8000e30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2200      	movs	r2, #0
 800137a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	f003 0310 	and.w	r3, r3, #16
 8001386:	2b00      	cmp	r3, #0
 8001388:	d118      	bne.n	80013bc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001392:	f023 0302 	bic.w	r3, r3, #2
 8001396:	f043 0202 	orr.w	r2, r3, #2
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f000 fc36 	bl	8001c10 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2200      	movs	r2, #0
 80013a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ae:	f023 0303 	bic.w	r3, r3, #3
 80013b2:	f043 0201 	orr.w	r2, r3, #1
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	641a      	str	r2, [r3, #64]	; 0x40
 80013ba:	e001      	b.n	80013c0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80013c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
	...

080013d4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80013dc:	2300      	movs	r3, #0
 80013de:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d101      	bne.n	80013ee <HAL_ADC_Start+0x1a>
 80013ea:	2302      	movs	r3, #2
 80013ec:	e0b2      	b.n	8001554 <HAL_ADC_Start+0x180>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2201      	movs	r2, #1
 80013f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	2b01      	cmp	r3, #1
 8001402:	d018      	beq.n	8001436 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	689a      	ldr	r2, [r3, #8]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f042 0201 	orr.w	r2, r2, #1
 8001412:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001414:	4b52      	ldr	r3, [pc, #328]	; (8001560 <HAL_ADC_Start+0x18c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a52      	ldr	r2, [pc, #328]	; (8001564 <HAL_ADC_Start+0x190>)
 800141a:	fba2 2303 	umull	r2, r3, r2, r3
 800141e:	0c9a      	lsrs	r2, r3, #18
 8001420:	4613      	mov	r3, r2
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	4413      	add	r3, r2
 8001426:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001428:	e002      	b.n	8001430 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	3b01      	subs	r3, #1
 800142e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1f9      	bne.n	800142a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	f003 0301 	and.w	r3, r3, #1
 8001440:	2b01      	cmp	r3, #1
 8001442:	d17a      	bne.n	800153a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001448:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800144c:	f023 0301 	bic.w	r3, r3, #1
 8001450:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001462:	2b00      	cmp	r3, #0
 8001464:	d007      	beq.n	8001476 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800146e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800147e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001482:	d106      	bne.n	8001492 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001488:	f023 0206 	bic.w	r2, r3, #6
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	645a      	str	r2, [r3, #68]	; 0x44
 8001490:	e002      	b.n	8001498 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014a0:	4b31      	ldr	r3, [pc, #196]	; (8001568 <HAL_ADC_Start+0x194>)
 80014a2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80014ac:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f003 031f 	and.w	r3, r3, #31
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d12a      	bne.n	8001510 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a2b      	ldr	r2, [pc, #172]	; (800156c <HAL_ADC_Start+0x198>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d015      	beq.n	80014f0 <HAL_ADC_Start+0x11c>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a29      	ldr	r2, [pc, #164]	; (8001570 <HAL_ADC_Start+0x19c>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d105      	bne.n	80014da <HAL_ADC_Start+0x106>
 80014ce:	4b26      	ldr	r3, [pc, #152]	; (8001568 <HAL_ADC_Start+0x194>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f003 031f 	and.w	r3, r3, #31
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d00a      	beq.n	80014f0 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a25      	ldr	r2, [pc, #148]	; (8001574 <HAL_ADC_Start+0x1a0>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d136      	bne.n	8001552 <HAL_ADC_Start+0x17e>
 80014e4:	4b20      	ldr	r3, [pc, #128]	; (8001568 <HAL_ADC_Start+0x194>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f003 0310 	and.w	r3, r3, #16
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d130      	bne.n	8001552 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d129      	bne.n	8001552 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	689a      	ldr	r2, [r3, #8]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800150c:	609a      	str	r2, [r3, #8]
 800150e:	e020      	b.n	8001552 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a15      	ldr	r2, [pc, #84]	; (800156c <HAL_ADC_Start+0x198>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d11b      	bne.n	8001552 <HAL_ADC_Start+0x17e>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d114      	bne.n	8001552 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	689a      	ldr	r2, [r3, #8]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	e00b      	b.n	8001552 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	f043 0210 	orr.w	r2, r3, #16
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154a:	f043 0201 	orr.w	r2, r3, #1
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001552:	2300      	movs	r3, #0
}
 8001554:	4618      	mov	r0, r3
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	20000040 	.word	0x20000040
 8001564:	431bde83 	.word	0x431bde83
 8001568:	40012300 	.word	0x40012300
 800156c:	40012000 	.word	0x40012000
 8001570:	40012100 	.word	0x40012100
 8001574:	40012200 	.word	0x40012200

08001578 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001586:	2b01      	cmp	r3, #1
 8001588:	d101      	bne.n	800158e <HAL_ADC_Stop+0x16>
 800158a:	2302      	movs	r3, #2
 800158c:	e021      	b.n	80015d2 <HAL_ADC_Stop+0x5a>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2201      	movs	r2, #1
 8001592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	689a      	ldr	r2, [r3, #8]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f022 0201 	bic.w	r2, r2, #1
 80015a4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d109      	bne.n	80015c8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015bc:	f023 0301 	bic.w	r3, r3, #1
 80015c0:	f043 0201 	orr.w	r2, r3, #1
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b084      	sub	sp, #16
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
 80015e6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80015e8:	2300      	movs	r3, #0
 80015ea:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015fa:	d113      	bne.n	8001624 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800160a:	d10b      	bne.n	8001624 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	f043 0220 	orr.w	r2, r3, #32
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e063      	b.n	80016ec <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001624:	f7ff fe86 	bl	8001334 <HAL_GetTick>
 8001628:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800162a:	e021      	b.n	8001670 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001632:	d01d      	beq.n	8001670 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d007      	beq.n	800164a <HAL_ADC_PollForConversion+0x6c>
 800163a:	f7ff fe7b 	bl	8001334 <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	429a      	cmp	r2, r3
 8001648:	d212      	bcs.n	8001670 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0302 	and.w	r3, r3, #2
 8001654:	2b02      	cmp	r3, #2
 8001656:	d00b      	beq.n	8001670 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165c:	f043 0204 	orr.w	r2, r3, #4
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e03d      	b.n	80016ec <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b02      	cmp	r3, #2
 800167c:	d1d6      	bne.n	800162c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f06f 0212 	mvn.w	r2, #18
 8001686:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d123      	bne.n	80016ea <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d11f      	bne.n	80016ea <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d006      	beq.n	80016c6 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d111      	bne.n	80016ea <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d105      	bne.n	80016ea <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	f043 0201 	orr.w	r2, r3, #1
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80016ea:	2300      	movs	r3, #0
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3710      	adds	r7, #16
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	2300      	movs	r3, #0
 8001702:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b02      	cmp	r3, #2
 8001710:	bf0c      	ite	eq
 8001712:	2301      	moveq	r3, #1
 8001714:	2300      	movne	r3, #0
 8001716:	b2db      	uxtb	r3, r3
 8001718:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f003 0320 	and.w	r3, r3, #32
 8001724:	2b20      	cmp	r3, #32
 8001726:	bf0c      	ite	eq
 8001728:	2301      	moveq	r3, #1
 800172a:	2300      	movne	r3, #0
 800172c:	b2db      	uxtb	r3, r3
 800172e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d049      	beq.n	80017ca <HAL_ADC_IRQHandler+0xd6>
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d046      	beq.n	80017ca <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001740:	f003 0310 	and.w	r3, r3, #16
 8001744:	2b00      	cmp	r3, #0
 8001746:	d105      	bne.n	8001754 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d12b      	bne.n	80017ba <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001766:	2b00      	cmp	r3, #0
 8001768:	d127      	bne.n	80017ba <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001770:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001774:	2b00      	cmp	r3, #0
 8001776:	d006      	beq.n	8001786 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001782:	2b00      	cmp	r3, #0
 8001784:	d119      	bne.n	80017ba <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	685a      	ldr	r2, [r3, #4]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 0220 	bic.w	r2, r2, #32
 8001794:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d105      	bne.n	80017ba <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	f043 0201 	orr.w	r2, r3, #1
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f000 f8e8 	bl	8001990 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f06f 0212 	mvn.w	r2, #18
 80017c8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0304 	and.w	r3, r3, #4
 80017d4:	2b04      	cmp	r3, #4
 80017d6:	bf0c      	ite	eq
 80017d8:	2301      	moveq	r3, #1
 80017da:	2300      	movne	r3, #0
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ea:	2b80      	cmp	r3, #128	; 0x80
 80017ec:	bf0c      	ite	eq
 80017ee:	2301      	moveq	r3, #1
 80017f0:	2300      	movne	r3, #0
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d057      	beq.n	80018ac <HAL_ADC_IRQHandler+0x1b8>
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d054      	beq.n	80018ac <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	f003 0310 	and.w	r3, r3, #16
 800180a:	2b00      	cmp	r3, #0
 800180c:	d105      	bne.n	800181a <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d139      	bne.n	800189c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800182e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001832:	2b00      	cmp	r3, #0
 8001834:	d006      	beq.n	8001844 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001840:	2b00      	cmp	r3, #0
 8001842:	d12b      	bne.n	800189c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800184e:	2b00      	cmp	r3, #0
 8001850:	d124      	bne.n	800189c <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800185c:	2b00      	cmp	r3, #0
 800185e:	d11d      	bne.n	800189c <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001864:	2b00      	cmp	r3, #0
 8001866:	d119      	bne.n	800189c <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	685a      	ldr	r2, [r3, #4]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001876:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188c:	2b00      	cmp	r3, #0
 800188e:	d105      	bne.n	800189c <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001894:	f043 0201 	orr.w	r2, r3, #1
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f000 fab3 	bl	8001e08 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f06f 020c 	mvn.w	r2, #12
 80018aa:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	bf0c      	ite	eq
 80018ba:	2301      	moveq	r3, #1
 80018bc:	2300      	movne	r3, #0
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018cc:	2b40      	cmp	r3, #64	; 0x40
 80018ce:	bf0c      	ite	eq
 80018d0:	2301      	moveq	r3, #1
 80018d2:	2300      	movne	r3, #0
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d017      	beq.n	800190e <HAL_ADC_IRQHandler+0x21a>
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d014      	beq.n	800190e <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d10d      	bne.n	800190e <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f000 f850 	bl	80019a4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f06f 0201 	mvn.w	r2, #1
 800190c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0320 	and.w	r3, r3, #32
 8001918:	2b20      	cmp	r3, #32
 800191a:	bf0c      	ite	eq
 800191c:	2301      	moveq	r3, #1
 800191e:	2300      	movne	r3, #0
 8001920:	b2db      	uxtb	r3, r3
 8001922:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800192e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001932:	bf0c      	ite	eq
 8001934:	2301      	moveq	r3, #1
 8001936:	2300      	movne	r3, #0
 8001938:	b2db      	uxtb	r3, r3
 800193a:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d015      	beq.n	800196e <HAL_ADC_IRQHandler+0x27a>
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d012      	beq.n	800196e <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194c:	f043 0202 	orr.w	r2, r3, #2
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f06f 0220 	mvn.w	r2, #32
 800195c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f000 f82a 	bl	80019b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f06f 0220 	mvn.w	r2, #32
 800196c:	601a      	str	r2, [r3, #0]
  }
}
 800196e:	bf00      	nop
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001984:	4618      	mov	r0, r3
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80019d6:	2300      	movs	r3, #0
 80019d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d101      	bne.n	80019e8 <HAL_ADC_ConfigChannel+0x1c>
 80019e4:	2302      	movs	r3, #2
 80019e6:	e105      	b.n	8001bf4 <HAL_ADC_ConfigChannel+0x228>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2b09      	cmp	r3, #9
 80019f6:	d925      	bls.n	8001a44 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	68d9      	ldr	r1, [r3, #12]
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	461a      	mov	r2, r3
 8001a06:	4613      	mov	r3, r2
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	4413      	add	r3, r2
 8001a0c:	3b1e      	subs	r3, #30
 8001a0e:	2207      	movs	r2, #7
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	43da      	mvns	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	400a      	ands	r2, r1
 8001a1c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68d9      	ldr	r1, [r3, #12]
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	689a      	ldr	r2, [r3, #8]
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	4618      	mov	r0, r3
 8001a30:	4603      	mov	r3, r0
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	4403      	add	r3, r0
 8001a36:	3b1e      	subs	r3, #30
 8001a38:	409a      	lsls	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	e022      	b.n	8001a8a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6919      	ldr	r1, [r3, #16]
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	461a      	mov	r2, r3
 8001a52:	4613      	mov	r3, r2
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	4413      	add	r3, r2
 8001a58:	2207      	movs	r2, #7
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43da      	mvns	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	400a      	ands	r2, r1
 8001a66:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6919      	ldr	r1, [r3, #16]
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	689a      	ldr	r2, [r3, #8]
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	4618      	mov	r0, r3
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	4403      	add	r3, r0
 8001a80:	409a      	lsls	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	430a      	orrs	r2, r1
 8001a88:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2b06      	cmp	r3, #6
 8001a90:	d824      	bhi.n	8001adc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685a      	ldr	r2, [r3, #4]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	4413      	add	r3, r2
 8001aa2:	3b05      	subs	r3, #5
 8001aa4:	221f      	movs	r2, #31
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	43da      	mvns	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	400a      	ands	r2, r1
 8001ab2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685a      	ldr	r2, [r3, #4]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4413      	add	r3, r2
 8001acc:	3b05      	subs	r3, #5
 8001ace:	fa00 f203 	lsl.w	r2, r0, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	635a      	str	r2, [r3, #52]	; 0x34
 8001ada:	e04c      	b.n	8001b76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2b0c      	cmp	r3, #12
 8001ae2:	d824      	bhi.n	8001b2e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685a      	ldr	r2, [r3, #4]
 8001aee:	4613      	mov	r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	4413      	add	r3, r2
 8001af4:	3b23      	subs	r3, #35	; 0x23
 8001af6:	221f      	movs	r2, #31
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43da      	mvns	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	400a      	ands	r2, r1
 8001b04:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	4618      	mov	r0, r3
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685a      	ldr	r2, [r3, #4]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4413      	add	r3, r2
 8001b1e:	3b23      	subs	r3, #35	; 0x23
 8001b20:	fa00 f203 	lsl.w	r2, r0, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	631a      	str	r2, [r3, #48]	; 0x30
 8001b2c:	e023      	b.n	8001b76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685a      	ldr	r2, [r3, #4]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	3b41      	subs	r3, #65	; 0x41
 8001b40:	221f      	movs	r2, #31
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43da      	mvns	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	400a      	ands	r2, r1
 8001b4e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685a      	ldr	r2, [r3, #4]
 8001b62:	4613      	mov	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4413      	add	r3, r2
 8001b68:	3b41      	subs	r3, #65	; 0x41
 8001b6a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	430a      	orrs	r2, r1
 8001b74:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b76:	4b22      	ldr	r3, [pc, #136]	; (8001c00 <HAL_ADC_ConfigChannel+0x234>)
 8001b78:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a21      	ldr	r2, [pc, #132]	; (8001c04 <HAL_ADC_ConfigChannel+0x238>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d109      	bne.n	8001b98 <HAL_ADC_ConfigChannel+0x1cc>
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b12      	cmp	r3, #18
 8001b8a:	d105      	bne.n	8001b98 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a19      	ldr	r2, [pc, #100]	; (8001c04 <HAL_ADC_ConfigChannel+0x238>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d123      	bne.n	8001bea <HAL_ADC_ConfigChannel+0x21e>
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2b10      	cmp	r3, #16
 8001ba8:	d003      	beq.n	8001bb2 <HAL_ADC_ConfigChannel+0x1e6>
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2b11      	cmp	r3, #17
 8001bb0:	d11b      	bne.n	8001bea <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2b10      	cmp	r3, #16
 8001bc4:	d111      	bne.n	8001bea <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bc6:	4b10      	ldr	r3, [pc, #64]	; (8001c08 <HAL_ADC_ConfigChannel+0x23c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a10      	ldr	r2, [pc, #64]	; (8001c0c <HAL_ADC_ConfigChannel+0x240>)
 8001bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd0:	0c9a      	lsrs	r2, r3, #18
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4413      	add	r3, r2
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001bdc:	e002      	b.n	8001be4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	3b01      	subs	r3, #1
 8001be2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f9      	bne.n	8001bde <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3714      	adds	r7, #20
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	40012300 	.word	0x40012300
 8001c04:	40012000 	.word	0x40012000
 8001c08:	20000040 	.word	0x20000040
 8001c0c:	431bde83 	.word	0x431bde83

08001c10 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c18:	4b79      	ldr	r3, [pc, #484]	; (8001e00 <ADC_Init+0x1f0>)
 8001c1a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	685a      	ldr	r2, [r3, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	431a      	orrs	r2, r3
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	685a      	ldr	r2, [r3, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	6859      	ldr	r1, [r3, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	021a      	lsls	r2, r3, #8
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	430a      	orrs	r2, r1
 8001c58:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	685a      	ldr	r2, [r3, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001c68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6859      	ldr	r1, [r3, #4]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	689a      	ldr	r2, [r3, #8]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6899      	ldr	r1, [r3, #8]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	68da      	ldr	r2, [r3, #12]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca2:	4a58      	ldr	r2, [pc, #352]	; (8001e04 <ADC_Init+0x1f4>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d022      	beq.n	8001cee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	689a      	ldr	r2, [r3, #8]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cb6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6899      	ldr	r1, [r3, #8]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001cd8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	6899      	ldr	r1, [r3, #8]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	e00f      	b.n	8001d0e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cfc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d0c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 0202 	bic.w	r2, r2, #2
 8001d1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6899      	ldr	r1, [r3, #8]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	7e1b      	ldrb	r3, [r3, #24]
 8001d28:	005a      	lsls	r2, r3, #1
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d01b      	beq.n	8001d74 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	685a      	ldr	r2, [r3, #4]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d4a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001d5a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6859      	ldr	r1, [r3, #4]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d66:	3b01      	subs	r3, #1
 8001d68:	035a      	lsls	r2, r3, #13
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	e007      	b.n	8001d84 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d82:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001d92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	051a      	lsls	r2, r3, #20
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	430a      	orrs	r2, r1
 8001da8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001db8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	6899      	ldr	r1, [r3, #8]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001dc6:	025a      	lsls	r2, r3, #9
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689a      	ldr	r2, [r3, #8]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dde:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6899      	ldr	r1, [r3, #8]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	029a      	lsls	r2, r3, #10
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	430a      	orrs	r2, r1
 8001df2:	609a      	str	r2, [r3, #8]
}
 8001df4:	bf00      	nop
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	40012300 	.word	0x40012300
 8001e04:	0f000001 	.word	0x0f000001

08001e08 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <__NVIC_SetPriorityGrouping+0x44>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e32:	68ba      	ldr	r2, [r7, #8]
 8001e34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e38:	4013      	ands	r3, r2
 8001e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e4e:	4a04      	ldr	r2, [pc, #16]	; (8001e60 <__NVIC_SetPriorityGrouping+0x44>)
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	60d3      	str	r3, [r2, #12]
}
 8001e54:	bf00      	nop
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr
 8001e60:	e000ed00 	.word	0xe000ed00

08001e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e68:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <__NVIC_GetPriorityGrouping+0x18>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	0a1b      	lsrs	r3, r3, #8
 8001e6e:	f003 0307 	and.w	r3, r3, #7
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	e000ed00 	.word	0xe000ed00

08001e80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	db0b      	blt.n	8001eaa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e92:	79fb      	ldrb	r3, [r7, #7]
 8001e94:	f003 021f 	and.w	r2, r3, #31
 8001e98:	4907      	ldr	r1, [pc, #28]	; (8001eb8 <__NVIC_EnableIRQ+0x38>)
 8001e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9e:	095b      	lsrs	r3, r3, #5
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	e000e100 	.word	0xe000e100

08001ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	6039      	str	r1, [r7, #0]
 8001ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	db0a      	blt.n	8001ee6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	b2da      	uxtb	r2, r3
 8001ed4:	490c      	ldr	r1, [pc, #48]	; (8001f08 <__NVIC_SetPriority+0x4c>)
 8001ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eda:	0112      	lsls	r2, r2, #4
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	440b      	add	r3, r1
 8001ee0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ee4:	e00a      	b.n	8001efc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	4908      	ldr	r1, [pc, #32]	; (8001f0c <__NVIC_SetPriority+0x50>)
 8001eec:	79fb      	ldrb	r3, [r7, #7]
 8001eee:	f003 030f 	and.w	r3, r3, #15
 8001ef2:	3b04      	subs	r3, #4
 8001ef4:	0112      	lsls	r2, r2, #4
 8001ef6:	b2d2      	uxtb	r2, r2
 8001ef8:	440b      	add	r3, r1
 8001efa:	761a      	strb	r2, [r3, #24]
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	e000e100 	.word	0xe000e100
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b089      	sub	sp, #36	; 0x24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	f1c3 0307 	rsb	r3, r3, #7
 8001f2a:	2b04      	cmp	r3, #4
 8001f2c:	bf28      	it	cs
 8001f2e:	2304      	movcs	r3, #4
 8001f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	3304      	adds	r3, #4
 8001f36:	2b06      	cmp	r3, #6
 8001f38:	d902      	bls.n	8001f40 <NVIC_EncodePriority+0x30>
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	3b03      	subs	r3, #3
 8001f3e:	e000      	b.n	8001f42 <NVIC_EncodePriority+0x32>
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	43da      	mvns	r2, r3
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	401a      	ands	r2, r3
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f62:	43d9      	mvns	r1, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f68:	4313      	orrs	r3, r2
         );
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3724      	adds	r7, #36	; 0x24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
	...

08001f78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3b01      	subs	r3, #1
 8001f84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f88:	d301      	bcc.n	8001f8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e00f      	b.n	8001fae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f8e:	4a0a      	ldr	r2, [pc, #40]	; (8001fb8 <SysTick_Config+0x40>)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3b01      	subs	r3, #1
 8001f94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f96:	210f      	movs	r1, #15
 8001f98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f9c:	f7ff ff8e 	bl	8001ebc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fa0:	4b05      	ldr	r3, [pc, #20]	; (8001fb8 <SysTick_Config+0x40>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fa6:	4b04      	ldr	r3, [pc, #16]	; (8001fb8 <SysTick_Config+0x40>)
 8001fa8:	2207      	movs	r2, #7
 8001faa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	e000e010 	.word	0xe000e010

08001fbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f7ff ff29 	bl	8001e1c <__NVIC_SetPriorityGrouping>
}
 8001fca:	bf00      	nop
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b086      	sub	sp, #24
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	4603      	mov	r3, r0
 8001fda:	60b9      	str	r1, [r7, #8]
 8001fdc:	607a      	str	r2, [r7, #4]
 8001fde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fe4:	f7ff ff3e 	bl	8001e64 <__NVIC_GetPriorityGrouping>
 8001fe8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	68b9      	ldr	r1, [r7, #8]
 8001fee:	6978      	ldr	r0, [r7, #20]
 8001ff0:	f7ff ff8e 	bl	8001f10 <NVIC_EncodePriority>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ffa:	4611      	mov	r1, r2
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff ff5d 	bl	8001ebc <__NVIC_SetPriority>
}
 8002002:	bf00      	nop
 8002004:	3718      	adds	r7, #24
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b082      	sub	sp, #8
 800200e:	af00      	add	r7, sp, #0
 8002010:	4603      	mov	r3, r0
 8002012:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff ff31 	bl	8001e80 <__NVIC_EnableIRQ>
}
 800201e:	bf00      	nop
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7ff ffa2 	bl	8001f78 <SysTick_Config>
 8002034:	4603      	mov	r3, r0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b082      	sub	sp, #8
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d101      	bne.n	8002050 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e014      	b.n	800207a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	791b      	ldrb	r3, [r3, #4]
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d105      	bne.n	8002066 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f7fe ff31 	bl	8000ec8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2202      	movs	r2, #2
 800206a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002082:	b480      	push	{r7}
 8002084:	b087      	sub	sp, #28
 8002086:	af00      	add	r7, sp, #0
 8002088:	60f8      	str	r0, [r7, #12]
 800208a:	60b9      	str	r1, [r7, #8]
 800208c:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	795b      	ldrb	r3, [r3, #5]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d101      	bne.n	800209a <HAL_DAC_ConfigChannel+0x18>
 8002096:	2302      	movs	r3, #2
 8002098:	e03c      	b.n	8002114 <HAL_DAC_ConfigChannel+0x92>
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2201      	movs	r2, #1
 800209e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2202      	movs	r2, #2
 80020a4:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f003 0310 	and.w	r3, r3, #16
 80020b4:	f640 72fe 	movw	r2, #4094	; 0xffe
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	4013      	ands	r3, r2
 80020c2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f003 0310 	and.w	r3, r3, #16
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	697a      	ldr	r2, [r7, #20]
 80020de:	4313      	orrs	r3, r2
 80020e0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6819      	ldr	r1, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f003 0310 	and.w	r3, r3, #16
 80020f6:	22c0      	movs	r2, #192	; 0xc0
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43da      	mvns	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	400a      	ands	r2, r1
 8002104:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2201      	movs	r2, #1
 800210a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2200      	movs	r2, #0
 8002110:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	371c      	adds	r7, #28
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002120:	b480      	push	{r7}
 8002122:	b089      	sub	sp, #36	; 0x24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800212a:	2300      	movs	r3, #0
 800212c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800212e:	2300      	movs	r3, #0
 8002130:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002132:	2300      	movs	r3, #0
 8002134:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002136:	2300      	movs	r3, #0
 8002138:	61fb      	str	r3, [r7, #28]
 800213a:	e16b      	b.n	8002414 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800213c:	2201      	movs	r2, #1
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	4013      	ands	r3, r2
 800214e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	429a      	cmp	r2, r3
 8002156:	f040 815a 	bne.w	800240e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f003 0303 	and.w	r3, r3, #3
 8002162:	2b01      	cmp	r3, #1
 8002164:	d005      	beq.n	8002172 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800216e:	2b02      	cmp	r3, #2
 8002170:	d130      	bne.n	80021d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	2203      	movs	r2, #3
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	43db      	mvns	r3, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4013      	ands	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	68da      	ldr	r2, [r3, #12]
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4313      	orrs	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021a8:	2201      	movs	r2, #1
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	43db      	mvns	r3, r3
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	4013      	ands	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	091b      	lsrs	r3, r3, #4
 80021be:	f003 0201 	and.w	r2, r3, #1
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 0303 	and.w	r3, r3, #3
 80021dc:	2b03      	cmp	r3, #3
 80021de:	d017      	beq.n	8002210 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	2203      	movs	r2, #3
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	43db      	mvns	r3, r3
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4013      	ands	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4313      	orrs	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f003 0303 	and.w	r3, r3, #3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d123      	bne.n	8002264 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	08da      	lsrs	r2, r3, #3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3208      	adds	r2, #8
 8002224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002228:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	220f      	movs	r2, #15
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	43db      	mvns	r3, r3
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4013      	ands	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	691a      	ldr	r2, [r3, #16]
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4313      	orrs	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	08da      	lsrs	r2, r3, #3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	3208      	adds	r2, #8
 800225e:	69b9      	ldr	r1, [r7, #24]
 8002260:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	2203      	movs	r2, #3
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	43db      	mvns	r3, r3
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4013      	ands	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f003 0203 	and.w	r2, r3, #3
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4313      	orrs	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f000 80b4 	beq.w	800240e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022a6:	2300      	movs	r3, #0
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	4b60      	ldr	r3, [pc, #384]	; (800242c <HAL_GPIO_Init+0x30c>)
 80022ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ae:	4a5f      	ldr	r2, [pc, #380]	; (800242c <HAL_GPIO_Init+0x30c>)
 80022b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022b4:	6453      	str	r3, [r2, #68]	; 0x44
 80022b6:	4b5d      	ldr	r3, [pc, #372]	; (800242c <HAL_GPIO_Init+0x30c>)
 80022b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022c2:	4a5b      	ldr	r2, [pc, #364]	; (8002430 <HAL_GPIO_Init+0x310>)
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	089b      	lsrs	r3, r3, #2
 80022c8:	3302      	adds	r3, #2
 80022ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	f003 0303 	and.w	r3, r3, #3
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	220f      	movs	r2, #15
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	43db      	mvns	r3, r3
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4013      	ands	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a52      	ldr	r2, [pc, #328]	; (8002434 <HAL_GPIO_Init+0x314>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d02b      	beq.n	8002346 <HAL_GPIO_Init+0x226>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a51      	ldr	r2, [pc, #324]	; (8002438 <HAL_GPIO_Init+0x318>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d025      	beq.n	8002342 <HAL_GPIO_Init+0x222>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a50      	ldr	r2, [pc, #320]	; (800243c <HAL_GPIO_Init+0x31c>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d01f      	beq.n	800233e <HAL_GPIO_Init+0x21e>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a4f      	ldr	r2, [pc, #316]	; (8002440 <HAL_GPIO_Init+0x320>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d019      	beq.n	800233a <HAL_GPIO_Init+0x21a>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a4e      	ldr	r2, [pc, #312]	; (8002444 <HAL_GPIO_Init+0x324>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d013      	beq.n	8002336 <HAL_GPIO_Init+0x216>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a4d      	ldr	r2, [pc, #308]	; (8002448 <HAL_GPIO_Init+0x328>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d00d      	beq.n	8002332 <HAL_GPIO_Init+0x212>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a4c      	ldr	r2, [pc, #304]	; (800244c <HAL_GPIO_Init+0x32c>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d007      	beq.n	800232e <HAL_GPIO_Init+0x20e>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a4b      	ldr	r2, [pc, #300]	; (8002450 <HAL_GPIO_Init+0x330>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d101      	bne.n	800232a <HAL_GPIO_Init+0x20a>
 8002326:	2307      	movs	r3, #7
 8002328:	e00e      	b.n	8002348 <HAL_GPIO_Init+0x228>
 800232a:	2308      	movs	r3, #8
 800232c:	e00c      	b.n	8002348 <HAL_GPIO_Init+0x228>
 800232e:	2306      	movs	r3, #6
 8002330:	e00a      	b.n	8002348 <HAL_GPIO_Init+0x228>
 8002332:	2305      	movs	r3, #5
 8002334:	e008      	b.n	8002348 <HAL_GPIO_Init+0x228>
 8002336:	2304      	movs	r3, #4
 8002338:	e006      	b.n	8002348 <HAL_GPIO_Init+0x228>
 800233a:	2303      	movs	r3, #3
 800233c:	e004      	b.n	8002348 <HAL_GPIO_Init+0x228>
 800233e:	2302      	movs	r3, #2
 8002340:	e002      	b.n	8002348 <HAL_GPIO_Init+0x228>
 8002342:	2301      	movs	r3, #1
 8002344:	e000      	b.n	8002348 <HAL_GPIO_Init+0x228>
 8002346:	2300      	movs	r3, #0
 8002348:	69fa      	ldr	r2, [r7, #28]
 800234a:	f002 0203 	and.w	r2, r2, #3
 800234e:	0092      	lsls	r2, r2, #2
 8002350:	4093      	lsls	r3, r2
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4313      	orrs	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002358:	4935      	ldr	r1, [pc, #212]	; (8002430 <HAL_GPIO_Init+0x310>)
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	089b      	lsrs	r3, r3, #2
 800235e:	3302      	adds	r3, #2
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002366:	4b3b      	ldr	r3, [pc, #236]	; (8002454 <HAL_GPIO_Init+0x334>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	43db      	mvns	r3, r3
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	4013      	ands	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d003      	beq.n	800238a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	4313      	orrs	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800238a:	4a32      	ldr	r2, [pc, #200]	; (8002454 <HAL_GPIO_Init+0x334>)
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002390:	4b30      	ldr	r3, [pc, #192]	; (8002454 <HAL_GPIO_Init+0x334>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	43db      	mvns	r3, r3
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4013      	ands	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d003      	beq.n	80023b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023b4:	4a27      	ldr	r2, [pc, #156]	; (8002454 <HAL_GPIO_Init+0x334>)
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023ba:	4b26      	ldr	r3, [pc, #152]	; (8002454 <HAL_GPIO_Init+0x334>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	43db      	mvns	r3, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4013      	ands	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	4313      	orrs	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023de:	4a1d      	ldr	r2, [pc, #116]	; (8002454 <HAL_GPIO_Init+0x334>)
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023e4:	4b1b      	ldr	r3, [pc, #108]	; (8002454 <HAL_GPIO_Init+0x334>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	43db      	mvns	r3, r3
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	4013      	ands	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d003      	beq.n	8002408 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	4313      	orrs	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002408:	4a12      	ldr	r2, [pc, #72]	; (8002454 <HAL_GPIO_Init+0x334>)
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	3301      	adds	r3, #1
 8002412:	61fb      	str	r3, [r7, #28]
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	2b0f      	cmp	r3, #15
 8002418:	f67f ae90 	bls.w	800213c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800241c:	bf00      	nop
 800241e:	bf00      	nop
 8002420:	3724      	adds	r7, #36	; 0x24
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	40023800 	.word	0x40023800
 8002430:	40013800 	.word	0x40013800
 8002434:	40020000 	.word	0x40020000
 8002438:	40020400 	.word	0x40020400
 800243c:	40020800 	.word	0x40020800
 8002440:	40020c00 	.word	0x40020c00
 8002444:	40021000 	.word	0x40021000
 8002448:	40021400 	.word	0x40021400
 800244c:	40021800 	.word	0x40021800
 8002450:	40021c00 	.word	0x40021c00
 8002454:	40013c00 	.word	0x40013c00

08002458 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	460b      	mov	r3, r1
 8002462:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	691a      	ldr	r2, [r3, #16]
 8002468:	887b      	ldrh	r3, [r7, #2]
 800246a:	4013      	ands	r3, r2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d002      	beq.n	8002476 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002470:	2301      	movs	r3, #1
 8002472:	73fb      	strb	r3, [r7, #15]
 8002474:	e001      	b.n	800247a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002476:	2300      	movs	r3, #0
 8002478:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800247a:	7bfb      	ldrb	r3, [r7, #15]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3714      	adds	r7, #20
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	460b      	mov	r3, r1
 8002492:	807b      	strh	r3, [r7, #2]
 8002494:	4613      	mov	r3, r2
 8002496:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002498:	787b      	ldrb	r3, [r7, #1]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800249e:	887a      	ldrh	r2, [r7, #2]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024a4:	e003      	b.n	80024ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024a6:	887b      	ldrh	r3, [r7, #2]
 80024a8:	041a      	lsls	r2, r3, #16
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	619a      	str	r2, [r3, #24]
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b085      	sub	sp, #20
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
 80024c2:	460b      	mov	r3, r1
 80024c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024cc:	887a      	ldrh	r2, [r7, #2]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	4013      	ands	r3, r2
 80024d2:	041a      	lsls	r2, r3, #16
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	43d9      	mvns	r1, r3
 80024d8:	887b      	ldrh	r3, [r7, #2]
 80024da:	400b      	ands	r3, r1
 80024dc:	431a      	orrs	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	619a      	str	r2, [r3, #24]
}
 80024e2:	bf00      	nop
 80024e4:	3714      	adds	r7, #20
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
	...

080024f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e264      	b.n	80029cc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d075      	beq.n	80025fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800250e:	4ba3      	ldr	r3, [pc, #652]	; (800279c <HAL_RCC_OscConfig+0x2ac>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 030c 	and.w	r3, r3, #12
 8002516:	2b04      	cmp	r3, #4
 8002518:	d00c      	beq.n	8002534 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800251a:	4ba0      	ldr	r3, [pc, #640]	; (800279c <HAL_RCC_OscConfig+0x2ac>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002522:	2b08      	cmp	r3, #8
 8002524:	d112      	bne.n	800254c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002526:	4b9d      	ldr	r3, [pc, #628]	; (800279c <HAL_RCC_OscConfig+0x2ac>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800252e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002532:	d10b      	bne.n	800254c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002534:	4b99      	ldr	r3, [pc, #612]	; (800279c <HAL_RCC_OscConfig+0x2ac>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d05b      	beq.n	80025f8 <HAL_RCC_OscConfig+0x108>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d157      	bne.n	80025f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e23f      	b.n	80029cc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002554:	d106      	bne.n	8002564 <HAL_RCC_OscConfig+0x74>
 8002556:	4b91      	ldr	r3, [pc, #580]	; (800279c <HAL_RCC_OscConfig+0x2ac>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a90      	ldr	r2, [pc, #576]	; (800279c <HAL_RCC_OscConfig+0x2ac>)
 800255c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002560:	6013      	str	r3, [r2, #0]
 8002562:	e01d      	b.n	80025a0 <HAL_RCC_OscConfig+0xb0>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800256c:	d10c      	bne.n	8002588 <HAL_RCC_OscConfig+0x98>
 800256e:	4b8b      	ldr	r3, [pc, #556]	; (800279c <HAL_RCC_OscConfig+0x2ac>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a8a      	ldr	r2, [pc, #552]	; (800279c <HAL_RCC_OscConfig+0x2ac>)
 8002574:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002578:	6013      	str	r3, [r2, #0]
 800257a:	4b88      	ldr	r3, [pc, #544]	; (800279c <HAL_RCC_OscConfig+0x2ac>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a87      	ldr	r2, [pc, #540]	; (800279c <HAL_RCC_OscConfig+0x2ac>)
 8002580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002584:	6013      	str	r3, [r2, #0]
 8002586:	e00b      	b.n	80025a0 <HAL_RCC_OscConfig+0xb0>
 8002588:	4b84      	ldr	r3, [pc, #528]	; (800279c <HAL_RCC_OscConfig+0x2ac>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a83      	ldr	r2, [pc, #524]	; (800279c <HAL_RCC_OscConfig+0x2ac>)
 800258e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002592:	6013      	str	r3, [r2, #0]
 8002594:	4b81      	ldr	r3, [pc, #516]	; (800279c <HAL_RCC_OscConfig+0x2ac>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a80      	ldr	r2, [pc, #512]	; (800279c <HAL_RCC_OscConfig+0x2ac>)
 800259a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800259e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d013      	beq.n	80025d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a8:	f7fe fec4 	bl	8001334 <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025b0:	f7fe fec0 	bl	8001334 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b64      	cmp	r3, #100	; 0x64
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e204      	b.n	80029cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c2:	4b76      	ldr	r3, [pc, #472]	; (800279c <HAL_RCC_OscConfig+0x2ac>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d0f0      	beq.n	80025b0 <HAL_RCC_OscConfig+0xc0>
 80025ce:	e014      	b.n	80025fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d0:	f7fe feb0 	bl	8001334 <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025d8:	f7fe feac 	bl	8001334 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b64      	cmp	r3, #100	; 0x64
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e1f0      	b.n	80029cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ea:	4b6c      	ldr	r3, [pc, #432]	; (800279c <HAL_RCC_OscConfig+0x2ac>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1f0      	bne.n	80025d8 <HAL_RCC_OscConfig+0xe8>
 80025f6:	e000      	b.n	80025fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d063      	beq.n	80026ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002606:	4b65      	ldr	r3, [pc, #404]	; (800279c <HAL_RCC_OscConfig+0x2ac>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 030c 	and.w	r3, r3, #12
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00b      	beq.n	800262a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002612:	4b62      	ldr	r3, [pc, #392]	; (800279c <HAL_RCC_OscConfig+0x2ac>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800261a:	2b08      	cmp	r3, #8
 800261c:	d11c      	bne.n	8002658 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800261e:	4b5f      	ldr	r3, [pc, #380]	; (800279c <HAL_RCC_OscConfig+0x2ac>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d116      	bne.n	8002658 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800262a:	4b5c      	ldr	r3, [pc, #368]	; (800279c <HAL_RCC_OscConfig+0x2ac>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d005      	beq.n	8002642 <HAL_RCC_OscConfig+0x152>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d001      	beq.n	8002642 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e1c4      	b.n	80029cc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002642:	4b56      	ldr	r3, [pc, #344]	; (800279c <HAL_RCC_OscConfig+0x2ac>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	4952      	ldr	r1, [pc, #328]	; (800279c <HAL_RCC_OscConfig+0x2ac>)
 8002652:	4313      	orrs	r3, r2
 8002654:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002656:	e03a      	b.n	80026ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d020      	beq.n	80026a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002660:	4b4f      	ldr	r3, [pc, #316]	; (80027a0 <HAL_RCC_OscConfig+0x2b0>)
 8002662:	2201      	movs	r2, #1
 8002664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002666:	f7fe fe65 	bl	8001334 <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800266e:	f7fe fe61 	bl	8001334 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e1a5      	b.n	80029cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002680:	4b46      	ldr	r3, [pc, #280]	; (800279c <HAL_RCC_OscConfig+0x2ac>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d0f0      	beq.n	800266e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800268c:	4b43      	ldr	r3, [pc, #268]	; (800279c <HAL_RCC_OscConfig+0x2ac>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	4940      	ldr	r1, [pc, #256]	; (800279c <HAL_RCC_OscConfig+0x2ac>)
 800269c:	4313      	orrs	r3, r2
 800269e:	600b      	str	r3, [r1, #0]
 80026a0:	e015      	b.n	80026ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026a2:	4b3f      	ldr	r3, [pc, #252]	; (80027a0 <HAL_RCC_OscConfig+0x2b0>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a8:	f7fe fe44 	bl	8001334 <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026b0:	f7fe fe40 	bl	8001334 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e184      	b.n	80029cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026c2:	4b36      	ldr	r3, [pc, #216]	; (800279c <HAL_RCC_OscConfig+0x2ac>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1f0      	bne.n	80026b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0308 	and.w	r3, r3, #8
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d030      	beq.n	800273c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d016      	beq.n	8002710 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026e2:	4b30      	ldr	r3, [pc, #192]	; (80027a4 <HAL_RCC_OscConfig+0x2b4>)
 80026e4:	2201      	movs	r2, #1
 80026e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e8:	f7fe fe24 	bl	8001334 <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026f0:	f7fe fe20 	bl	8001334 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e164      	b.n	80029cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002702:	4b26      	ldr	r3, [pc, #152]	; (800279c <HAL_RCC_OscConfig+0x2ac>)
 8002704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d0f0      	beq.n	80026f0 <HAL_RCC_OscConfig+0x200>
 800270e:	e015      	b.n	800273c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002710:	4b24      	ldr	r3, [pc, #144]	; (80027a4 <HAL_RCC_OscConfig+0x2b4>)
 8002712:	2200      	movs	r2, #0
 8002714:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002716:	f7fe fe0d 	bl	8001334 <HAL_GetTick>
 800271a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800271c:	e008      	b.n	8002730 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800271e:	f7fe fe09 	bl	8001334 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e14d      	b.n	80029cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002730:	4b1a      	ldr	r3, [pc, #104]	; (800279c <HAL_RCC_OscConfig+0x2ac>)
 8002732:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1f0      	bne.n	800271e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0304 	and.w	r3, r3, #4
 8002744:	2b00      	cmp	r3, #0
 8002746:	f000 80a0 	beq.w	800288a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800274a:	2300      	movs	r3, #0
 800274c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800274e:	4b13      	ldr	r3, [pc, #76]	; (800279c <HAL_RCC_OscConfig+0x2ac>)
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10f      	bne.n	800277a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800275a:	2300      	movs	r3, #0
 800275c:	60bb      	str	r3, [r7, #8]
 800275e:	4b0f      	ldr	r3, [pc, #60]	; (800279c <HAL_RCC_OscConfig+0x2ac>)
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	4a0e      	ldr	r2, [pc, #56]	; (800279c <HAL_RCC_OscConfig+0x2ac>)
 8002764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002768:	6413      	str	r3, [r2, #64]	; 0x40
 800276a:	4b0c      	ldr	r3, [pc, #48]	; (800279c <HAL_RCC_OscConfig+0x2ac>)
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002772:	60bb      	str	r3, [r7, #8]
 8002774:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002776:	2301      	movs	r3, #1
 8002778:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800277a:	4b0b      	ldr	r3, [pc, #44]	; (80027a8 <HAL_RCC_OscConfig+0x2b8>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002782:	2b00      	cmp	r3, #0
 8002784:	d121      	bne.n	80027ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002786:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <HAL_RCC_OscConfig+0x2b8>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a07      	ldr	r2, [pc, #28]	; (80027a8 <HAL_RCC_OscConfig+0x2b8>)
 800278c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002790:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002792:	f7fe fdcf 	bl	8001334 <HAL_GetTick>
 8002796:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002798:	e011      	b.n	80027be <HAL_RCC_OscConfig+0x2ce>
 800279a:	bf00      	nop
 800279c:	40023800 	.word	0x40023800
 80027a0:	42470000 	.word	0x42470000
 80027a4:	42470e80 	.word	0x42470e80
 80027a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ac:	f7fe fdc2 	bl	8001334 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e106      	b.n	80029cc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027be:	4b85      	ldr	r3, [pc, #532]	; (80029d4 <HAL_RCC_OscConfig+0x4e4>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d0f0      	beq.n	80027ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d106      	bne.n	80027e0 <HAL_RCC_OscConfig+0x2f0>
 80027d2:	4b81      	ldr	r3, [pc, #516]	; (80029d8 <HAL_RCC_OscConfig+0x4e8>)
 80027d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d6:	4a80      	ldr	r2, [pc, #512]	; (80029d8 <HAL_RCC_OscConfig+0x4e8>)
 80027d8:	f043 0301 	orr.w	r3, r3, #1
 80027dc:	6713      	str	r3, [r2, #112]	; 0x70
 80027de:	e01c      	b.n	800281a <HAL_RCC_OscConfig+0x32a>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	2b05      	cmp	r3, #5
 80027e6:	d10c      	bne.n	8002802 <HAL_RCC_OscConfig+0x312>
 80027e8:	4b7b      	ldr	r3, [pc, #492]	; (80029d8 <HAL_RCC_OscConfig+0x4e8>)
 80027ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ec:	4a7a      	ldr	r2, [pc, #488]	; (80029d8 <HAL_RCC_OscConfig+0x4e8>)
 80027ee:	f043 0304 	orr.w	r3, r3, #4
 80027f2:	6713      	str	r3, [r2, #112]	; 0x70
 80027f4:	4b78      	ldr	r3, [pc, #480]	; (80029d8 <HAL_RCC_OscConfig+0x4e8>)
 80027f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f8:	4a77      	ldr	r2, [pc, #476]	; (80029d8 <HAL_RCC_OscConfig+0x4e8>)
 80027fa:	f043 0301 	orr.w	r3, r3, #1
 80027fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002800:	e00b      	b.n	800281a <HAL_RCC_OscConfig+0x32a>
 8002802:	4b75      	ldr	r3, [pc, #468]	; (80029d8 <HAL_RCC_OscConfig+0x4e8>)
 8002804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002806:	4a74      	ldr	r2, [pc, #464]	; (80029d8 <HAL_RCC_OscConfig+0x4e8>)
 8002808:	f023 0301 	bic.w	r3, r3, #1
 800280c:	6713      	str	r3, [r2, #112]	; 0x70
 800280e:	4b72      	ldr	r3, [pc, #456]	; (80029d8 <HAL_RCC_OscConfig+0x4e8>)
 8002810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002812:	4a71      	ldr	r2, [pc, #452]	; (80029d8 <HAL_RCC_OscConfig+0x4e8>)
 8002814:	f023 0304 	bic.w	r3, r3, #4
 8002818:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d015      	beq.n	800284e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002822:	f7fe fd87 	bl	8001334 <HAL_GetTick>
 8002826:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002828:	e00a      	b.n	8002840 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800282a:	f7fe fd83 	bl	8001334 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	f241 3288 	movw	r2, #5000	; 0x1388
 8002838:	4293      	cmp	r3, r2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e0c5      	b.n	80029cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002840:	4b65      	ldr	r3, [pc, #404]	; (80029d8 <HAL_RCC_OscConfig+0x4e8>)
 8002842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0ee      	beq.n	800282a <HAL_RCC_OscConfig+0x33a>
 800284c:	e014      	b.n	8002878 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800284e:	f7fe fd71 	bl	8001334 <HAL_GetTick>
 8002852:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002854:	e00a      	b.n	800286c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002856:	f7fe fd6d 	bl	8001334 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	f241 3288 	movw	r2, #5000	; 0x1388
 8002864:	4293      	cmp	r3, r2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e0af      	b.n	80029cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800286c:	4b5a      	ldr	r3, [pc, #360]	; (80029d8 <HAL_RCC_OscConfig+0x4e8>)
 800286e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1ee      	bne.n	8002856 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002878:	7dfb      	ldrb	r3, [r7, #23]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d105      	bne.n	800288a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800287e:	4b56      	ldr	r3, [pc, #344]	; (80029d8 <HAL_RCC_OscConfig+0x4e8>)
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	4a55      	ldr	r2, [pc, #340]	; (80029d8 <HAL_RCC_OscConfig+0x4e8>)
 8002884:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002888:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 809b 	beq.w	80029ca <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002894:	4b50      	ldr	r3, [pc, #320]	; (80029d8 <HAL_RCC_OscConfig+0x4e8>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 030c 	and.w	r3, r3, #12
 800289c:	2b08      	cmp	r3, #8
 800289e:	d05c      	beq.n	800295a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d141      	bne.n	800292c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028a8:	4b4c      	ldr	r3, [pc, #304]	; (80029dc <HAL_RCC_OscConfig+0x4ec>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ae:	f7fe fd41 	bl	8001334 <HAL_GetTick>
 80028b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028b4:	e008      	b.n	80028c8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028b6:	f7fe fd3d 	bl	8001334 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d901      	bls.n	80028c8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e081      	b.n	80029cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028c8:	4b43      	ldr	r3, [pc, #268]	; (80029d8 <HAL_RCC_OscConfig+0x4e8>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1f0      	bne.n	80028b6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	69da      	ldr	r2, [r3, #28]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	431a      	orrs	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e2:	019b      	lsls	r3, r3, #6
 80028e4:	431a      	orrs	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ea:	085b      	lsrs	r3, r3, #1
 80028ec:	3b01      	subs	r3, #1
 80028ee:	041b      	lsls	r3, r3, #16
 80028f0:	431a      	orrs	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f6:	061b      	lsls	r3, r3, #24
 80028f8:	4937      	ldr	r1, [pc, #220]	; (80029d8 <HAL_RCC_OscConfig+0x4e8>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028fe:	4b37      	ldr	r3, [pc, #220]	; (80029dc <HAL_RCC_OscConfig+0x4ec>)
 8002900:	2201      	movs	r2, #1
 8002902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002904:	f7fe fd16 	bl	8001334 <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800290c:	f7fe fd12 	bl	8001334 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e056      	b.n	80029cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800291e:	4b2e      	ldr	r3, [pc, #184]	; (80029d8 <HAL_RCC_OscConfig+0x4e8>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d0f0      	beq.n	800290c <HAL_RCC_OscConfig+0x41c>
 800292a:	e04e      	b.n	80029ca <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800292c:	4b2b      	ldr	r3, [pc, #172]	; (80029dc <HAL_RCC_OscConfig+0x4ec>)
 800292e:	2200      	movs	r2, #0
 8002930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002932:	f7fe fcff 	bl	8001334 <HAL_GetTick>
 8002936:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002938:	e008      	b.n	800294c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800293a:	f7fe fcfb 	bl	8001334 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e03f      	b.n	80029cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800294c:	4b22      	ldr	r3, [pc, #136]	; (80029d8 <HAL_RCC_OscConfig+0x4e8>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d1f0      	bne.n	800293a <HAL_RCC_OscConfig+0x44a>
 8002958:	e037      	b.n	80029ca <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d101      	bne.n	8002966 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e032      	b.n	80029cc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002966:	4b1c      	ldr	r3, [pc, #112]	; (80029d8 <HAL_RCC_OscConfig+0x4e8>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d028      	beq.n	80029c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800297e:	429a      	cmp	r2, r3
 8002980:	d121      	bne.n	80029c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800298c:	429a      	cmp	r2, r3
 800298e:	d11a      	bne.n	80029c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002996:	4013      	ands	r3, r2
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800299c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800299e:	4293      	cmp	r3, r2
 80029a0:	d111      	bne.n	80029c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ac:	085b      	lsrs	r3, r3, #1
 80029ae:	3b01      	subs	r3, #1
 80029b0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d107      	bne.n	80029c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d001      	beq.n	80029ca <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e000      	b.n	80029cc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3718      	adds	r7, #24
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40007000 	.word	0x40007000
 80029d8:	40023800 	.word	0x40023800
 80029dc:	42470060 	.word	0x42470060

080029e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d101      	bne.n	80029f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e0cc      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029f4:	4b68      	ldr	r3, [pc, #416]	; (8002b98 <HAL_RCC_ClockConfig+0x1b8>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d90c      	bls.n	8002a1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a02:	4b65      	ldr	r3, [pc, #404]	; (8002b98 <HAL_RCC_ClockConfig+0x1b8>)
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0a:	4b63      	ldr	r3, [pc, #396]	; (8002b98 <HAL_RCC_ClockConfig+0x1b8>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d001      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e0b8      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d020      	beq.n	8002a6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d005      	beq.n	8002a40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a34:	4b59      	ldr	r3, [pc, #356]	; (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	4a58      	ldr	r2, [pc, #352]	; (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002a3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0308 	and.w	r3, r3, #8
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d005      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a4c:	4b53      	ldr	r3, [pc, #332]	; (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	4a52      	ldr	r2, [pc, #328]	; (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002a52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a58:	4b50      	ldr	r3, [pc, #320]	; (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	494d      	ldr	r1, [pc, #308]	; (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d044      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d107      	bne.n	8002a8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7e:	4b47      	ldr	r3, [pc, #284]	; (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d119      	bne.n	8002abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e07f      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d003      	beq.n	8002a9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a9a:	2b03      	cmp	r3, #3
 8002a9c:	d107      	bne.n	8002aae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a9e:	4b3f      	ldr	r3, [pc, #252]	; (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d109      	bne.n	8002abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e06f      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aae:	4b3b      	ldr	r3, [pc, #236]	; (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e067      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002abe:	4b37      	ldr	r3, [pc, #220]	; (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f023 0203 	bic.w	r2, r3, #3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	4934      	ldr	r1, [pc, #208]	; (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ad0:	f7fe fc30 	bl	8001334 <HAL_GetTick>
 8002ad4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad6:	e00a      	b.n	8002aee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ad8:	f7fe fc2c 	bl	8001334 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e04f      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aee:	4b2b      	ldr	r3, [pc, #172]	; (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f003 020c 	and.w	r2, r3, #12
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d1eb      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b00:	4b25      	ldr	r3, [pc, #148]	; (8002b98 <HAL_RCC_ClockConfig+0x1b8>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0307 	and.w	r3, r3, #7
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d20c      	bcs.n	8002b28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b0e:	4b22      	ldr	r3, [pc, #136]	; (8002b98 <HAL_RCC_ClockConfig+0x1b8>)
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b16:	4b20      	ldr	r3, [pc, #128]	; (8002b98 <HAL_RCC_ClockConfig+0x1b8>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	683a      	ldr	r2, [r7, #0]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d001      	beq.n	8002b28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e032      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d008      	beq.n	8002b46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b34:	4b19      	ldr	r3, [pc, #100]	; (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	4916      	ldr	r1, [pc, #88]	; (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0308 	and.w	r3, r3, #8
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d009      	beq.n	8002b66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b52:	4b12      	ldr	r3, [pc, #72]	; (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	490e      	ldr	r1, [pc, #56]	; (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b66:	f000 f821 	bl	8002bac <HAL_RCC_GetSysClockFreq>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	4b0b      	ldr	r3, [pc, #44]	; (8002b9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	091b      	lsrs	r3, r3, #4
 8002b72:	f003 030f 	and.w	r3, r3, #15
 8002b76:	490a      	ldr	r1, [pc, #40]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b78:	5ccb      	ldrb	r3, [r1, r3]
 8002b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b7e:	4a09      	ldr	r2, [pc, #36]	; (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b82:	4b09      	ldr	r3, [pc, #36]	; (8002ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7fe fb90 	bl	80012ac <HAL_InitTick>

  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	40023c00 	.word	0x40023c00
 8002b9c:	40023800 	.word	0x40023800
 8002ba0:	08004174 	.word	0x08004174
 8002ba4:	20000040 	.word	0x20000040
 8002ba8:	20000044 	.word	0x20000044

08002bac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002bb0:	b084      	sub	sp, #16
 8002bb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	607b      	str	r3, [r7, #4]
 8002bb8:	2300      	movs	r3, #0
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bc4:	4b67      	ldr	r3, [pc, #412]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f003 030c 	and.w	r3, r3, #12
 8002bcc:	2b08      	cmp	r3, #8
 8002bce:	d00d      	beq.n	8002bec <HAL_RCC_GetSysClockFreq+0x40>
 8002bd0:	2b08      	cmp	r3, #8
 8002bd2:	f200 80bd 	bhi.w	8002d50 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d002      	beq.n	8002be0 <HAL_RCC_GetSysClockFreq+0x34>
 8002bda:	2b04      	cmp	r3, #4
 8002bdc:	d003      	beq.n	8002be6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002bde:	e0b7      	b.n	8002d50 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002be0:	4b61      	ldr	r3, [pc, #388]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002be2:	60bb      	str	r3, [r7, #8]
       break;
 8002be4:	e0b7      	b.n	8002d56 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002be6:	4b61      	ldr	r3, [pc, #388]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002be8:	60bb      	str	r3, [r7, #8]
      break;
 8002bea:	e0b4      	b.n	8002d56 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bec:	4b5d      	ldr	r3, [pc, #372]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bf4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bf6:	4b5b      	ldr	r3, [pc, #364]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d04d      	beq.n	8002c9e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c02:	4b58      	ldr	r3, [pc, #352]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	099b      	lsrs	r3, r3, #6
 8002c08:	461a      	mov	r2, r3
 8002c0a:	f04f 0300 	mov.w	r3, #0
 8002c0e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002c12:	f04f 0100 	mov.w	r1, #0
 8002c16:	ea02 0800 	and.w	r8, r2, r0
 8002c1a:	ea03 0901 	and.w	r9, r3, r1
 8002c1e:	4640      	mov	r0, r8
 8002c20:	4649      	mov	r1, r9
 8002c22:	f04f 0200 	mov.w	r2, #0
 8002c26:	f04f 0300 	mov.w	r3, #0
 8002c2a:	014b      	lsls	r3, r1, #5
 8002c2c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c30:	0142      	lsls	r2, r0, #5
 8002c32:	4610      	mov	r0, r2
 8002c34:	4619      	mov	r1, r3
 8002c36:	ebb0 0008 	subs.w	r0, r0, r8
 8002c3a:	eb61 0109 	sbc.w	r1, r1, r9
 8002c3e:	f04f 0200 	mov.w	r2, #0
 8002c42:	f04f 0300 	mov.w	r3, #0
 8002c46:	018b      	lsls	r3, r1, #6
 8002c48:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c4c:	0182      	lsls	r2, r0, #6
 8002c4e:	1a12      	subs	r2, r2, r0
 8002c50:	eb63 0301 	sbc.w	r3, r3, r1
 8002c54:	f04f 0000 	mov.w	r0, #0
 8002c58:	f04f 0100 	mov.w	r1, #0
 8002c5c:	00d9      	lsls	r1, r3, #3
 8002c5e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c62:	00d0      	lsls	r0, r2, #3
 8002c64:	4602      	mov	r2, r0
 8002c66:	460b      	mov	r3, r1
 8002c68:	eb12 0208 	adds.w	r2, r2, r8
 8002c6c:	eb43 0309 	adc.w	r3, r3, r9
 8002c70:	f04f 0000 	mov.w	r0, #0
 8002c74:	f04f 0100 	mov.w	r1, #0
 8002c78:	0259      	lsls	r1, r3, #9
 8002c7a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002c7e:	0250      	lsls	r0, r2, #9
 8002c80:	4602      	mov	r2, r0
 8002c82:	460b      	mov	r3, r1
 8002c84:	4610      	mov	r0, r2
 8002c86:	4619      	mov	r1, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	f04f 0300 	mov.w	r3, #0
 8002c90:	f7fd fa9a 	bl	80001c8 <__aeabi_uldivmod>
 8002c94:	4602      	mov	r2, r0
 8002c96:	460b      	mov	r3, r1
 8002c98:	4613      	mov	r3, r2
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	e04a      	b.n	8002d34 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c9e:	4b31      	ldr	r3, [pc, #196]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	099b      	lsrs	r3, r3, #6
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	f04f 0300 	mov.w	r3, #0
 8002caa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002cae:	f04f 0100 	mov.w	r1, #0
 8002cb2:	ea02 0400 	and.w	r4, r2, r0
 8002cb6:	ea03 0501 	and.w	r5, r3, r1
 8002cba:	4620      	mov	r0, r4
 8002cbc:	4629      	mov	r1, r5
 8002cbe:	f04f 0200 	mov.w	r2, #0
 8002cc2:	f04f 0300 	mov.w	r3, #0
 8002cc6:	014b      	lsls	r3, r1, #5
 8002cc8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ccc:	0142      	lsls	r2, r0, #5
 8002cce:	4610      	mov	r0, r2
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	1b00      	subs	r0, r0, r4
 8002cd4:	eb61 0105 	sbc.w	r1, r1, r5
 8002cd8:	f04f 0200 	mov.w	r2, #0
 8002cdc:	f04f 0300 	mov.w	r3, #0
 8002ce0:	018b      	lsls	r3, r1, #6
 8002ce2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ce6:	0182      	lsls	r2, r0, #6
 8002ce8:	1a12      	subs	r2, r2, r0
 8002cea:	eb63 0301 	sbc.w	r3, r3, r1
 8002cee:	f04f 0000 	mov.w	r0, #0
 8002cf2:	f04f 0100 	mov.w	r1, #0
 8002cf6:	00d9      	lsls	r1, r3, #3
 8002cf8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002cfc:	00d0      	lsls	r0, r2, #3
 8002cfe:	4602      	mov	r2, r0
 8002d00:	460b      	mov	r3, r1
 8002d02:	1912      	adds	r2, r2, r4
 8002d04:	eb45 0303 	adc.w	r3, r5, r3
 8002d08:	f04f 0000 	mov.w	r0, #0
 8002d0c:	f04f 0100 	mov.w	r1, #0
 8002d10:	0299      	lsls	r1, r3, #10
 8002d12:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002d16:	0290      	lsls	r0, r2, #10
 8002d18:	4602      	mov	r2, r0
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	4610      	mov	r0, r2
 8002d1e:	4619      	mov	r1, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	461a      	mov	r2, r3
 8002d24:	f04f 0300 	mov.w	r3, #0
 8002d28:	f7fd fa4e 	bl	80001c8 <__aeabi_uldivmod>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	460b      	mov	r3, r1
 8002d30:	4613      	mov	r3, r2
 8002d32:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d34:	4b0b      	ldr	r3, [pc, #44]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	0c1b      	lsrs	r3, r3, #16
 8002d3a:	f003 0303 	and.w	r3, r3, #3
 8002d3e:	3301      	adds	r3, #1
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4c:	60bb      	str	r3, [r7, #8]
      break;
 8002d4e:	e002      	b.n	8002d56 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d50:	4b05      	ldr	r3, [pc, #20]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002d52:	60bb      	str	r3, [r7, #8]
      break;
 8002d54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d56:	68bb      	ldr	r3, [r7, #8]
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002d62:	bf00      	nop
 8002d64:	40023800 	.word	0x40023800
 8002d68:	00f42400 	.word	0x00f42400
 8002d6c:	007a1200 	.word	0x007a1200

08002d70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d74:	4b03      	ldr	r3, [pc, #12]	; (8002d84 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d76:	681b      	ldr	r3, [r3, #0]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	20000040 	.word	0x20000040

08002d88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d8c:	f7ff fff0 	bl	8002d70 <HAL_RCC_GetHCLKFreq>
 8002d90:	4602      	mov	r2, r0
 8002d92:	4b05      	ldr	r3, [pc, #20]	; (8002da8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	0a9b      	lsrs	r3, r3, #10
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	4903      	ldr	r1, [pc, #12]	; (8002dac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d9e:	5ccb      	ldrb	r3, [r1, r3]
 8002da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40023800 	.word	0x40023800
 8002dac:	08004184 	.word	0x08004184

08002db0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002db4:	f7ff ffdc 	bl	8002d70 <HAL_RCC_GetHCLKFreq>
 8002db8:	4602      	mov	r2, r0
 8002dba:	4b05      	ldr	r3, [pc, #20]	; (8002dd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	0b5b      	lsrs	r3, r3, #13
 8002dc0:	f003 0307 	and.w	r3, r3, #7
 8002dc4:	4903      	ldr	r1, [pc, #12]	; (8002dd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dc6:	5ccb      	ldrb	r3, [r1, r3]
 8002dc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	40023800 	.word	0x40023800
 8002dd4:	08004184 	.word	0x08004184

08002dd8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e07b      	b.n	8002ee2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d108      	bne.n	8002e04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dfa:	d009      	beq.n	8002e10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	61da      	str	r2, [r3, #28]
 8002e02:	e005      	b.n	8002e10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d106      	bne.n	8002e30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f7fe f890 	bl	8000f50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2202      	movs	r2, #2
 8002e34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e46:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e62:	431a      	orrs	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	431a      	orrs	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	431a      	orrs	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e80:	431a      	orrs	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e94:	ea42 0103 	orr.w	r1, r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	0c1b      	lsrs	r3, r3, #16
 8002eae:	f003 0104 	and.w	r1, r3, #4
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb6:	f003 0210 	and.w	r2, r3, #16
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	69da      	ldr	r2, [r3, #28]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ed0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b082      	sub	sp, #8
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d101      	bne.n	8002efc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e041      	b.n	8002f80 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d106      	bne.n	8002f16 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f7fe f885 	bl	8001020 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2202      	movs	r2, #2
 8002f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	3304      	adds	r3, #4
 8002f26:	4619      	mov	r1, r3
 8002f28:	4610      	mov	r0, r2
 8002f2a:	f000 fb4b 	bl	80035c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e041      	b.n	800301e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d106      	bne.n	8002fb4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 f839 	bl	8003026 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3304      	adds	r3, #4
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	4610      	mov	r0, r2
 8002fc8:	f000 fafc 	bl	80035c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003026:	b480      	push	{r7}
 8003028:	b083      	sub	sp, #12
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800302e:	bf00      	nop
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b082      	sub	sp, #8
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b02      	cmp	r3, #2
 800304e:	d122      	bne.n	8003096 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b02      	cmp	r3, #2
 800305c:	d11b      	bne.n	8003096 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f06f 0202 	mvn.w	r2, #2
 8003066:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	f003 0303 	and.w	r3, r3, #3
 8003078:	2b00      	cmp	r3, #0
 800307a:	d003      	beq.n	8003084 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 fa82 	bl	8003586 <HAL_TIM_IC_CaptureCallback>
 8003082:	e005      	b.n	8003090 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 fa74 	bl	8003572 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 fa85 	bl	800359a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	f003 0304 	and.w	r3, r3, #4
 80030a0:	2b04      	cmp	r3, #4
 80030a2:	d122      	bne.n	80030ea <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	f003 0304 	and.w	r3, r3, #4
 80030ae:	2b04      	cmp	r3, #4
 80030b0:	d11b      	bne.n	80030ea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f06f 0204 	mvn.w	r2, #4
 80030ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2202      	movs	r2, #2
 80030c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d003      	beq.n	80030d8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 fa58 	bl	8003586 <HAL_TIM_IC_CaptureCallback>
 80030d6:	e005      	b.n	80030e4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 fa4a 	bl	8003572 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 fa5b 	bl	800359a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	f003 0308 	and.w	r3, r3, #8
 80030f4:	2b08      	cmp	r3, #8
 80030f6:	d122      	bne.n	800313e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	f003 0308 	and.w	r3, r3, #8
 8003102:	2b08      	cmp	r3, #8
 8003104:	d11b      	bne.n	800313e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f06f 0208 	mvn.w	r2, #8
 800310e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2204      	movs	r2, #4
 8003114:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	69db      	ldr	r3, [r3, #28]
 800311c:	f003 0303 	and.w	r3, r3, #3
 8003120:	2b00      	cmp	r3, #0
 8003122:	d003      	beq.n	800312c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f000 fa2e 	bl	8003586 <HAL_TIM_IC_CaptureCallback>
 800312a:	e005      	b.n	8003138 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 fa20 	bl	8003572 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 fa31 	bl	800359a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	f003 0310 	and.w	r3, r3, #16
 8003148:	2b10      	cmp	r3, #16
 800314a:	d122      	bne.n	8003192 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	f003 0310 	and.w	r3, r3, #16
 8003156:	2b10      	cmp	r3, #16
 8003158:	d11b      	bne.n	8003192 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f06f 0210 	mvn.w	r2, #16
 8003162:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2208      	movs	r2, #8
 8003168:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	69db      	ldr	r3, [r3, #28]
 8003170:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003174:	2b00      	cmp	r3, #0
 8003176:	d003      	beq.n	8003180 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 fa04 	bl	8003586 <HAL_TIM_IC_CaptureCallback>
 800317e:	e005      	b.n	800318c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 f9f6 	bl	8003572 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 fa07 	bl	800359a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	2b01      	cmp	r3, #1
 800319e:	d10e      	bne.n	80031be <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d107      	bne.n	80031be <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f06f 0201 	mvn.w	r2, #1
 80031b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 f9d0 	bl	800355e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c8:	2b80      	cmp	r3, #128	; 0x80
 80031ca:	d10e      	bne.n	80031ea <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d6:	2b80      	cmp	r3, #128	; 0x80
 80031d8:	d107      	bne.n	80031ea <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 fd5d 	bl	8003ca4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f4:	2b40      	cmp	r3, #64	; 0x40
 80031f6:	d10e      	bne.n	8003216 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003202:	2b40      	cmp	r3, #64	; 0x40
 8003204:	d107      	bne.n	8003216 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800320e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 f9cc 	bl	80035ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	f003 0320 	and.w	r3, r3, #32
 8003220:	2b20      	cmp	r3, #32
 8003222:	d10e      	bne.n	8003242 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	f003 0320 	and.w	r3, r3, #32
 800322e:	2b20      	cmp	r3, #32
 8003230:	d107      	bne.n	8003242 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f06f 0220 	mvn.w	r2, #32
 800323a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 fd27 	bl	8003c90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003242:	bf00      	nop
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
	...

0800324c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003258:	2300      	movs	r3, #0
 800325a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003262:	2b01      	cmp	r3, #1
 8003264:	d101      	bne.n	800326a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003266:	2302      	movs	r3, #2
 8003268:	e0ae      	b.n	80033c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2b0c      	cmp	r3, #12
 8003276:	f200 809f 	bhi.w	80033b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800327a:	a201      	add	r2, pc, #4	; (adr r2, 8003280 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800327c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003280:	080032b5 	.word	0x080032b5
 8003284:	080033b9 	.word	0x080033b9
 8003288:	080033b9 	.word	0x080033b9
 800328c:	080033b9 	.word	0x080033b9
 8003290:	080032f5 	.word	0x080032f5
 8003294:	080033b9 	.word	0x080033b9
 8003298:	080033b9 	.word	0x080033b9
 800329c:	080033b9 	.word	0x080033b9
 80032a0:	08003337 	.word	0x08003337
 80032a4:	080033b9 	.word	0x080033b9
 80032a8:	080033b9 	.word	0x080033b9
 80032ac:	080033b9 	.word	0x080033b9
 80032b0:	08003377 	.word	0x08003377
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68b9      	ldr	r1, [r7, #8]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f000 fa22 	bl	8003704 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	699a      	ldr	r2, [r3, #24]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0208 	orr.w	r2, r2, #8
 80032ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	699a      	ldr	r2, [r3, #24]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0204 	bic.w	r2, r2, #4
 80032de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6999      	ldr	r1, [r3, #24]
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	691a      	ldr	r2, [r3, #16]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	619a      	str	r2, [r3, #24]
      break;
 80032f2:	e064      	b.n	80033be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68b9      	ldr	r1, [r7, #8]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 fa72 	bl	80037e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	699a      	ldr	r2, [r3, #24]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800330e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	699a      	ldr	r2, [r3, #24]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800331e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6999      	ldr	r1, [r3, #24]
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	021a      	lsls	r2, r3, #8
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	430a      	orrs	r2, r1
 8003332:	619a      	str	r2, [r3, #24]
      break;
 8003334:	e043      	b.n	80033be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68b9      	ldr	r1, [r7, #8]
 800333c:	4618      	mov	r0, r3
 800333e:	f000 fac7 	bl	80038d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	69da      	ldr	r2, [r3, #28]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f042 0208 	orr.w	r2, r2, #8
 8003350:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	69da      	ldr	r2, [r3, #28]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 0204 	bic.w	r2, r2, #4
 8003360:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	69d9      	ldr	r1, [r3, #28]
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	691a      	ldr	r2, [r3, #16]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	61da      	str	r2, [r3, #28]
      break;
 8003374:	e023      	b.n	80033be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68b9      	ldr	r1, [r7, #8]
 800337c:	4618      	mov	r0, r3
 800337e:	f000 fb1b 	bl	80039b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	69da      	ldr	r2, [r3, #28]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003390:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	69da      	ldr	r2, [r3, #28]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	69d9      	ldr	r1, [r3, #28]
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	021a      	lsls	r2, r3, #8
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	61da      	str	r2, [r3, #28]
      break;
 80033b6:	e002      	b.n	80033be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	75fb      	strb	r3, [r7, #23]
      break;
 80033bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3718      	adds	r7, #24
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033da:	2300      	movs	r3, #0
 80033dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d101      	bne.n	80033ec <HAL_TIM_ConfigClockSource+0x1c>
 80033e8:	2302      	movs	r3, #2
 80033ea:	e0b4      	b.n	8003556 <HAL_TIM_ConfigClockSource+0x186>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2202      	movs	r2, #2
 80033f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800340a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003412:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68ba      	ldr	r2, [r7, #8]
 800341a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003424:	d03e      	beq.n	80034a4 <HAL_TIM_ConfigClockSource+0xd4>
 8003426:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800342a:	f200 8087 	bhi.w	800353c <HAL_TIM_ConfigClockSource+0x16c>
 800342e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003432:	f000 8086 	beq.w	8003542 <HAL_TIM_ConfigClockSource+0x172>
 8003436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800343a:	d87f      	bhi.n	800353c <HAL_TIM_ConfigClockSource+0x16c>
 800343c:	2b70      	cmp	r3, #112	; 0x70
 800343e:	d01a      	beq.n	8003476 <HAL_TIM_ConfigClockSource+0xa6>
 8003440:	2b70      	cmp	r3, #112	; 0x70
 8003442:	d87b      	bhi.n	800353c <HAL_TIM_ConfigClockSource+0x16c>
 8003444:	2b60      	cmp	r3, #96	; 0x60
 8003446:	d050      	beq.n	80034ea <HAL_TIM_ConfigClockSource+0x11a>
 8003448:	2b60      	cmp	r3, #96	; 0x60
 800344a:	d877      	bhi.n	800353c <HAL_TIM_ConfigClockSource+0x16c>
 800344c:	2b50      	cmp	r3, #80	; 0x50
 800344e:	d03c      	beq.n	80034ca <HAL_TIM_ConfigClockSource+0xfa>
 8003450:	2b50      	cmp	r3, #80	; 0x50
 8003452:	d873      	bhi.n	800353c <HAL_TIM_ConfigClockSource+0x16c>
 8003454:	2b40      	cmp	r3, #64	; 0x40
 8003456:	d058      	beq.n	800350a <HAL_TIM_ConfigClockSource+0x13a>
 8003458:	2b40      	cmp	r3, #64	; 0x40
 800345a:	d86f      	bhi.n	800353c <HAL_TIM_ConfigClockSource+0x16c>
 800345c:	2b30      	cmp	r3, #48	; 0x30
 800345e:	d064      	beq.n	800352a <HAL_TIM_ConfigClockSource+0x15a>
 8003460:	2b30      	cmp	r3, #48	; 0x30
 8003462:	d86b      	bhi.n	800353c <HAL_TIM_ConfigClockSource+0x16c>
 8003464:	2b20      	cmp	r3, #32
 8003466:	d060      	beq.n	800352a <HAL_TIM_ConfigClockSource+0x15a>
 8003468:	2b20      	cmp	r3, #32
 800346a:	d867      	bhi.n	800353c <HAL_TIM_ConfigClockSource+0x16c>
 800346c:	2b00      	cmp	r3, #0
 800346e:	d05c      	beq.n	800352a <HAL_TIM_ConfigClockSource+0x15a>
 8003470:	2b10      	cmp	r3, #16
 8003472:	d05a      	beq.n	800352a <HAL_TIM_ConfigClockSource+0x15a>
 8003474:	e062      	b.n	800353c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6818      	ldr	r0, [r3, #0]
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	6899      	ldr	r1, [r3, #8]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	f000 fb67 	bl	8003b58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003498:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68ba      	ldr	r2, [r7, #8]
 80034a0:	609a      	str	r2, [r3, #8]
      break;
 80034a2:	e04f      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6818      	ldr	r0, [r3, #0]
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	6899      	ldr	r1, [r3, #8]
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	f000 fb50 	bl	8003b58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689a      	ldr	r2, [r3, #8]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034c6:	609a      	str	r2, [r3, #8]
      break;
 80034c8:	e03c      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6818      	ldr	r0, [r3, #0]
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	6859      	ldr	r1, [r3, #4]
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	461a      	mov	r2, r3
 80034d8:	f000 fac4 	bl	8003a64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2150      	movs	r1, #80	; 0x50
 80034e2:	4618      	mov	r0, r3
 80034e4:	f000 fb1d 	bl	8003b22 <TIM_ITRx_SetConfig>
      break;
 80034e8:	e02c      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6818      	ldr	r0, [r3, #0]
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	6859      	ldr	r1, [r3, #4]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	461a      	mov	r2, r3
 80034f8:	f000 fae3 	bl	8003ac2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2160      	movs	r1, #96	; 0x60
 8003502:	4618      	mov	r0, r3
 8003504:	f000 fb0d 	bl	8003b22 <TIM_ITRx_SetConfig>
      break;
 8003508:	e01c      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6818      	ldr	r0, [r3, #0]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	6859      	ldr	r1, [r3, #4]
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	461a      	mov	r2, r3
 8003518:	f000 faa4 	bl	8003a64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2140      	movs	r1, #64	; 0x40
 8003522:	4618      	mov	r0, r3
 8003524:	f000 fafd 	bl	8003b22 <TIM_ITRx_SetConfig>
      break;
 8003528:	e00c      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4619      	mov	r1, r3
 8003534:	4610      	mov	r0, r2
 8003536:	f000 faf4 	bl	8003b22 <TIM_ITRx_SetConfig>
      break;
 800353a:	e003      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	73fb      	strb	r3, [r7, #15]
      break;
 8003540:	e000      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003542:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003554:	7bfb      	ldrb	r3, [r7, #15]
}
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003566:	bf00      	nop
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr

08003572 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003572:	b480      	push	{r7}
 8003574:	b083      	sub	sp, #12
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800357a:	bf00      	nop
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr

08003586 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003586:	b480      	push	{r7}
 8003588:	b083      	sub	sp, #12
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800358e:	bf00      	nop
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800359a:	b480      	push	{r7}
 800359c:	b083      	sub	sp, #12
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035ae:	b480      	push	{r7}
 80035b0:	b083      	sub	sp, #12
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
	...

080035c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a40      	ldr	r2, [pc, #256]	; (80036d8 <TIM_Base_SetConfig+0x114>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d013      	beq.n	8003604 <TIM_Base_SetConfig+0x40>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035e2:	d00f      	beq.n	8003604 <TIM_Base_SetConfig+0x40>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a3d      	ldr	r2, [pc, #244]	; (80036dc <TIM_Base_SetConfig+0x118>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d00b      	beq.n	8003604 <TIM_Base_SetConfig+0x40>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a3c      	ldr	r2, [pc, #240]	; (80036e0 <TIM_Base_SetConfig+0x11c>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d007      	beq.n	8003604 <TIM_Base_SetConfig+0x40>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a3b      	ldr	r2, [pc, #236]	; (80036e4 <TIM_Base_SetConfig+0x120>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d003      	beq.n	8003604 <TIM_Base_SetConfig+0x40>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a3a      	ldr	r2, [pc, #232]	; (80036e8 <TIM_Base_SetConfig+0x124>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d108      	bne.n	8003616 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800360a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	4313      	orrs	r3, r2
 8003614:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a2f      	ldr	r2, [pc, #188]	; (80036d8 <TIM_Base_SetConfig+0x114>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d02b      	beq.n	8003676 <TIM_Base_SetConfig+0xb2>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003624:	d027      	beq.n	8003676 <TIM_Base_SetConfig+0xb2>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a2c      	ldr	r2, [pc, #176]	; (80036dc <TIM_Base_SetConfig+0x118>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d023      	beq.n	8003676 <TIM_Base_SetConfig+0xb2>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a2b      	ldr	r2, [pc, #172]	; (80036e0 <TIM_Base_SetConfig+0x11c>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d01f      	beq.n	8003676 <TIM_Base_SetConfig+0xb2>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a2a      	ldr	r2, [pc, #168]	; (80036e4 <TIM_Base_SetConfig+0x120>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d01b      	beq.n	8003676 <TIM_Base_SetConfig+0xb2>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a29      	ldr	r2, [pc, #164]	; (80036e8 <TIM_Base_SetConfig+0x124>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d017      	beq.n	8003676 <TIM_Base_SetConfig+0xb2>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a28      	ldr	r2, [pc, #160]	; (80036ec <TIM_Base_SetConfig+0x128>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d013      	beq.n	8003676 <TIM_Base_SetConfig+0xb2>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a27      	ldr	r2, [pc, #156]	; (80036f0 <TIM_Base_SetConfig+0x12c>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d00f      	beq.n	8003676 <TIM_Base_SetConfig+0xb2>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a26      	ldr	r2, [pc, #152]	; (80036f4 <TIM_Base_SetConfig+0x130>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d00b      	beq.n	8003676 <TIM_Base_SetConfig+0xb2>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a25      	ldr	r2, [pc, #148]	; (80036f8 <TIM_Base_SetConfig+0x134>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d007      	beq.n	8003676 <TIM_Base_SetConfig+0xb2>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a24      	ldr	r2, [pc, #144]	; (80036fc <TIM_Base_SetConfig+0x138>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d003      	beq.n	8003676 <TIM_Base_SetConfig+0xb2>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a23      	ldr	r2, [pc, #140]	; (8003700 <TIM_Base_SetConfig+0x13c>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d108      	bne.n	8003688 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800367c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	4313      	orrs	r3, r2
 8003686:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	4313      	orrs	r3, r2
 8003694:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a0a      	ldr	r2, [pc, #40]	; (80036d8 <TIM_Base_SetConfig+0x114>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d003      	beq.n	80036bc <TIM_Base_SetConfig+0xf8>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a0c      	ldr	r2, [pc, #48]	; (80036e8 <TIM_Base_SetConfig+0x124>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d103      	bne.n	80036c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	691a      	ldr	r2, [r3, #16]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	615a      	str	r2, [r3, #20]
}
 80036ca:	bf00      	nop
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	40010000 	.word	0x40010000
 80036dc:	40000400 	.word	0x40000400
 80036e0:	40000800 	.word	0x40000800
 80036e4:	40000c00 	.word	0x40000c00
 80036e8:	40010400 	.word	0x40010400
 80036ec:	40014000 	.word	0x40014000
 80036f0:	40014400 	.word	0x40014400
 80036f4:	40014800 	.word	0x40014800
 80036f8:	40001800 	.word	0x40001800
 80036fc:	40001c00 	.word	0x40001c00
 8003700:	40002000 	.word	0x40002000

08003704 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003704:	b480      	push	{r7}
 8003706:	b087      	sub	sp, #28
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	f023 0201 	bic.w	r2, r3, #1
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f023 0303 	bic.w	r3, r3, #3
 800373a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	4313      	orrs	r3, r2
 8003744:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	f023 0302 	bic.w	r3, r3, #2
 800374c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	4313      	orrs	r3, r2
 8003756:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a20      	ldr	r2, [pc, #128]	; (80037dc <TIM_OC1_SetConfig+0xd8>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d003      	beq.n	8003768 <TIM_OC1_SetConfig+0x64>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a1f      	ldr	r2, [pc, #124]	; (80037e0 <TIM_OC1_SetConfig+0xdc>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d10c      	bne.n	8003782 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f023 0308 	bic.w	r3, r3, #8
 800376e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	4313      	orrs	r3, r2
 8003778:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f023 0304 	bic.w	r3, r3, #4
 8003780:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a15      	ldr	r2, [pc, #84]	; (80037dc <TIM_OC1_SetConfig+0xd8>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d003      	beq.n	8003792 <TIM_OC1_SetConfig+0x8e>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a14      	ldr	r2, [pc, #80]	; (80037e0 <TIM_OC1_SetConfig+0xdc>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d111      	bne.n	80037b6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003798:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685a      	ldr	r2, [r3, #4]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	621a      	str	r2, [r3, #32]
}
 80037d0:	bf00      	nop
 80037d2:	371c      	adds	r7, #28
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	40010000 	.word	0x40010000
 80037e0:	40010400 	.word	0x40010400

080037e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b087      	sub	sp, #28
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	f023 0210 	bic.w	r2, r3, #16
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800381a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	021b      	lsls	r3, r3, #8
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	4313      	orrs	r3, r2
 8003826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	f023 0320 	bic.w	r3, r3, #32
 800382e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	011b      	lsls	r3, r3, #4
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	4313      	orrs	r3, r2
 800383a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a22      	ldr	r2, [pc, #136]	; (80038c8 <TIM_OC2_SetConfig+0xe4>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d003      	beq.n	800384c <TIM_OC2_SetConfig+0x68>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a21      	ldr	r2, [pc, #132]	; (80038cc <TIM_OC2_SetConfig+0xe8>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d10d      	bne.n	8003868 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003852:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	011b      	lsls	r3, r3, #4
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	4313      	orrs	r3, r2
 800385e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003866:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a17      	ldr	r2, [pc, #92]	; (80038c8 <TIM_OC2_SetConfig+0xe4>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d003      	beq.n	8003878 <TIM_OC2_SetConfig+0x94>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a16      	ldr	r2, [pc, #88]	; (80038cc <TIM_OC2_SetConfig+0xe8>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d113      	bne.n	80038a0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800387e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003886:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	693a      	ldr	r2, [r7, #16]
 8003890:	4313      	orrs	r3, r2
 8003892:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	4313      	orrs	r3, r2
 800389e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685a      	ldr	r2, [r3, #4]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	621a      	str	r2, [r3, #32]
}
 80038ba:	bf00      	nop
 80038bc:	371c      	adds	r7, #28
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	40010000 	.word	0x40010000
 80038cc:	40010400 	.word	0x40010400

080038d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b087      	sub	sp, #28
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	69db      	ldr	r3, [r3, #28]
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 0303 	bic.w	r3, r3, #3
 8003906:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	4313      	orrs	r3, r2
 8003910:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003918:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	021b      	lsls	r3, r3, #8
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	4313      	orrs	r3, r2
 8003924:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a21      	ldr	r2, [pc, #132]	; (80039b0 <TIM_OC3_SetConfig+0xe0>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d003      	beq.n	8003936 <TIM_OC3_SetConfig+0x66>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a20      	ldr	r2, [pc, #128]	; (80039b4 <TIM_OC3_SetConfig+0xe4>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d10d      	bne.n	8003952 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800393c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	021b      	lsls	r3, r3, #8
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	4313      	orrs	r3, r2
 8003948:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003950:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a16      	ldr	r2, [pc, #88]	; (80039b0 <TIM_OC3_SetConfig+0xe0>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d003      	beq.n	8003962 <TIM_OC3_SetConfig+0x92>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a15      	ldr	r2, [pc, #84]	; (80039b4 <TIM_OC3_SetConfig+0xe4>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d113      	bne.n	800398a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003968:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003970:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	011b      	lsls	r3, r3, #4
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	4313      	orrs	r3, r2
 800397c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	011b      	lsls	r3, r3, #4
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	4313      	orrs	r3, r2
 8003988:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685a      	ldr	r2, [r3, #4]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	621a      	str	r2, [r3, #32]
}
 80039a4:	bf00      	nop
 80039a6:	371c      	adds	r7, #28
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr
 80039b0:	40010000 	.word	0x40010000
 80039b4:	40010400 	.word	0x40010400

080039b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b087      	sub	sp, #28
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	021b      	lsls	r3, r3, #8
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	031b      	lsls	r3, r3, #12
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a12      	ldr	r2, [pc, #72]	; (8003a5c <TIM_OC4_SetConfig+0xa4>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d003      	beq.n	8003a20 <TIM_OC4_SetConfig+0x68>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a11      	ldr	r2, [pc, #68]	; (8003a60 <TIM_OC4_SetConfig+0xa8>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d109      	bne.n	8003a34 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	019b      	lsls	r3, r3, #6
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	621a      	str	r2, [r3, #32]
}
 8003a4e:	bf00      	nop
 8003a50:	371c      	adds	r7, #28
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	40010000 	.word	0x40010000
 8003a60:	40010400 	.word	0x40010400

08003a64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b087      	sub	sp, #28
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6a1b      	ldr	r3, [r3, #32]
 8003a74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	f023 0201 	bic.w	r2, r3, #1
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	011b      	lsls	r3, r3, #4
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	f023 030a 	bic.w	r3, r3, #10
 8003aa0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	621a      	str	r2, [r3, #32]
}
 8003ab6:	bf00      	nop
 8003ab8:	371c      	adds	r7, #28
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr

08003ac2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ac2:	b480      	push	{r7}
 8003ac4:	b087      	sub	sp, #28
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	60f8      	str	r0, [r7, #12]
 8003aca:	60b9      	str	r1, [r7, #8]
 8003acc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	f023 0210 	bic.w	r2, r3, #16
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003aec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	031b      	lsls	r3, r3, #12
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003afe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	011b      	lsls	r3, r3, #4
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	621a      	str	r2, [r3, #32]
}
 8003b16:	bf00      	nop
 8003b18:	371c      	adds	r7, #28
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b22:	b480      	push	{r7}
 8003b24:	b085      	sub	sp, #20
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
 8003b2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	f043 0307 	orr.w	r3, r3, #7
 8003b44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	609a      	str	r2, [r3, #8]
}
 8003b4c:	bf00      	nop
 8003b4e:	3714      	adds	r7, #20
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b087      	sub	sp, #28
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
 8003b64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	021a      	lsls	r2, r3, #8
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	609a      	str	r2, [r3, #8]
}
 8003b8c:	bf00      	nop
 8003b8e:	371c      	adds	r7, #28
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d101      	bne.n	8003bb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bac:	2302      	movs	r3, #2
 8003bae:	e05a      	b.n	8003c66 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2202      	movs	r2, #2
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a21      	ldr	r2, [pc, #132]	; (8003c74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d022      	beq.n	8003c3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bfc:	d01d      	beq.n	8003c3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a1d      	ldr	r2, [pc, #116]	; (8003c78 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d018      	beq.n	8003c3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a1b      	ldr	r2, [pc, #108]	; (8003c7c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d013      	beq.n	8003c3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a1a      	ldr	r2, [pc, #104]	; (8003c80 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d00e      	beq.n	8003c3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a18      	ldr	r2, [pc, #96]	; (8003c84 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d009      	beq.n	8003c3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a17      	ldr	r2, [pc, #92]	; (8003c88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d004      	beq.n	8003c3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a15      	ldr	r2, [pc, #84]	; (8003c8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d10c      	bne.n	8003c54 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	68ba      	ldr	r2, [r7, #8]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68ba      	ldr	r2, [r7, #8]
 8003c52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3714      	adds	r7, #20
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	40010000 	.word	0x40010000
 8003c78:	40000400 	.word	0x40000400
 8003c7c:	40000800 	.word	0x40000800
 8003c80:	40000c00 	.word	0x40000c00
 8003c84:	40010400 	.word	0x40010400
 8003c88:	40014000 	.word	0x40014000
 8003c8c:	40001800 	.word	0x40001800

08003c90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e03f      	b.n	8003d4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d106      	bne.n	8003ce4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f7fd fa00 	bl	80010e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2224      	movs	r2, #36	; 0x24
 8003ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68da      	ldr	r2, [r3, #12]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cfa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 f829 	bl	8003d54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	691a      	ldr	r2, [r3, #16]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	695a      	ldr	r2, [r3, #20]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68da      	ldr	r2, [r3, #12]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2220      	movs	r2, #32
 8003d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
	...

08003d54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d58:	b09f      	sub	sp, #124	; 0x7c
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d6a:	68d9      	ldr	r1, [r3, #12]
 8003d6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	ea40 0301 	orr.w	r3, r0, r1
 8003d74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d78:	689a      	ldr	r2, [r3, #8]
 8003d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	431a      	orrs	r2, r3
 8003d86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d88:	69db      	ldr	r3, [r3, #28]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003d8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d98:	f021 010c 	bic.w	r1, r1, #12
 8003d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003da2:	430b      	orrs	r3, r1
 8003da4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	695b      	ldr	r3, [r3, #20]
 8003dac:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003db2:	6999      	ldr	r1, [r3, #24]
 8003db4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	ea40 0301 	orr.w	r3, r0, r1
 8003dbc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	4bc5      	ldr	r3, [pc, #788]	; (80040d8 <UART_SetConfig+0x384>)
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d004      	beq.n	8003dd2 <UART_SetConfig+0x7e>
 8003dc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	4bc3      	ldr	r3, [pc, #780]	; (80040dc <UART_SetConfig+0x388>)
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d103      	bne.n	8003dda <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003dd2:	f7fe ffed 	bl	8002db0 <HAL_RCC_GetPCLK2Freq>
 8003dd6:	6778      	str	r0, [r7, #116]	; 0x74
 8003dd8:	e002      	b.n	8003de0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003dda:	f7fe ffd5 	bl	8002d88 <HAL_RCC_GetPCLK1Freq>
 8003dde:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003de0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003de2:	69db      	ldr	r3, [r3, #28]
 8003de4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003de8:	f040 80b6 	bne.w	8003f58 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003dec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dee:	461c      	mov	r4, r3
 8003df0:	f04f 0500 	mov.w	r5, #0
 8003df4:	4622      	mov	r2, r4
 8003df6:	462b      	mov	r3, r5
 8003df8:	1891      	adds	r1, r2, r2
 8003dfa:	6439      	str	r1, [r7, #64]	; 0x40
 8003dfc:	415b      	adcs	r3, r3
 8003dfe:	647b      	str	r3, [r7, #68]	; 0x44
 8003e00:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e04:	1912      	adds	r2, r2, r4
 8003e06:	eb45 0303 	adc.w	r3, r5, r3
 8003e0a:	f04f 0000 	mov.w	r0, #0
 8003e0e:	f04f 0100 	mov.w	r1, #0
 8003e12:	00d9      	lsls	r1, r3, #3
 8003e14:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e18:	00d0      	lsls	r0, r2, #3
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	1911      	adds	r1, r2, r4
 8003e20:	6639      	str	r1, [r7, #96]	; 0x60
 8003e22:	416b      	adcs	r3, r5
 8003e24:	667b      	str	r3, [r7, #100]	; 0x64
 8003e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	f04f 0300 	mov.w	r3, #0
 8003e30:	1891      	adds	r1, r2, r2
 8003e32:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e34:	415b      	adcs	r3, r3
 8003e36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e3c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003e40:	f7fc f9c2 	bl	80001c8 <__aeabi_uldivmod>
 8003e44:	4602      	mov	r2, r0
 8003e46:	460b      	mov	r3, r1
 8003e48:	4ba5      	ldr	r3, [pc, #660]	; (80040e0 <UART_SetConfig+0x38c>)
 8003e4a:	fba3 2302 	umull	r2, r3, r3, r2
 8003e4e:	095b      	lsrs	r3, r3, #5
 8003e50:	011e      	lsls	r6, r3, #4
 8003e52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e54:	461c      	mov	r4, r3
 8003e56:	f04f 0500 	mov.w	r5, #0
 8003e5a:	4622      	mov	r2, r4
 8003e5c:	462b      	mov	r3, r5
 8003e5e:	1891      	adds	r1, r2, r2
 8003e60:	6339      	str	r1, [r7, #48]	; 0x30
 8003e62:	415b      	adcs	r3, r3
 8003e64:	637b      	str	r3, [r7, #52]	; 0x34
 8003e66:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003e6a:	1912      	adds	r2, r2, r4
 8003e6c:	eb45 0303 	adc.w	r3, r5, r3
 8003e70:	f04f 0000 	mov.w	r0, #0
 8003e74:	f04f 0100 	mov.w	r1, #0
 8003e78:	00d9      	lsls	r1, r3, #3
 8003e7a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e7e:	00d0      	lsls	r0, r2, #3
 8003e80:	4602      	mov	r2, r0
 8003e82:	460b      	mov	r3, r1
 8003e84:	1911      	adds	r1, r2, r4
 8003e86:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e88:	416b      	adcs	r3, r5
 8003e8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	461a      	mov	r2, r3
 8003e92:	f04f 0300 	mov.w	r3, #0
 8003e96:	1891      	adds	r1, r2, r2
 8003e98:	62b9      	str	r1, [r7, #40]	; 0x28
 8003e9a:	415b      	adcs	r3, r3
 8003e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ea2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003ea6:	f7fc f98f 	bl	80001c8 <__aeabi_uldivmod>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	460b      	mov	r3, r1
 8003eae:	4b8c      	ldr	r3, [pc, #560]	; (80040e0 <UART_SetConfig+0x38c>)
 8003eb0:	fba3 1302 	umull	r1, r3, r3, r2
 8003eb4:	095b      	lsrs	r3, r3, #5
 8003eb6:	2164      	movs	r1, #100	; 0x64
 8003eb8:	fb01 f303 	mul.w	r3, r1, r3
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	3332      	adds	r3, #50	; 0x32
 8003ec2:	4a87      	ldr	r2, [pc, #540]	; (80040e0 <UART_SetConfig+0x38c>)
 8003ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec8:	095b      	lsrs	r3, r3, #5
 8003eca:	005b      	lsls	r3, r3, #1
 8003ecc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ed0:	441e      	add	r6, r3
 8003ed2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f04f 0100 	mov.w	r1, #0
 8003eda:	4602      	mov	r2, r0
 8003edc:	460b      	mov	r3, r1
 8003ede:	1894      	adds	r4, r2, r2
 8003ee0:	623c      	str	r4, [r7, #32]
 8003ee2:	415b      	adcs	r3, r3
 8003ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ee6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003eea:	1812      	adds	r2, r2, r0
 8003eec:	eb41 0303 	adc.w	r3, r1, r3
 8003ef0:	f04f 0400 	mov.w	r4, #0
 8003ef4:	f04f 0500 	mov.w	r5, #0
 8003ef8:	00dd      	lsls	r5, r3, #3
 8003efa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003efe:	00d4      	lsls	r4, r2, #3
 8003f00:	4622      	mov	r2, r4
 8003f02:	462b      	mov	r3, r5
 8003f04:	1814      	adds	r4, r2, r0
 8003f06:	653c      	str	r4, [r7, #80]	; 0x50
 8003f08:	414b      	adcs	r3, r1
 8003f0a:	657b      	str	r3, [r7, #84]	; 0x54
 8003f0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	461a      	mov	r2, r3
 8003f12:	f04f 0300 	mov.w	r3, #0
 8003f16:	1891      	adds	r1, r2, r2
 8003f18:	61b9      	str	r1, [r7, #24]
 8003f1a:	415b      	adcs	r3, r3
 8003f1c:	61fb      	str	r3, [r7, #28]
 8003f1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f22:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003f26:	f7fc f94f 	bl	80001c8 <__aeabi_uldivmod>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	4b6c      	ldr	r3, [pc, #432]	; (80040e0 <UART_SetConfig+0x38c>)
 8003f30:	fba3 1302 	umull	r1, r3, r3, r2
 8003f34:	095b      	lsrs	r3, r3, #5
 8003f36:	2164      	movs	r1, #100	; 0x64
 8003f38:	fb01 f303 	mul.w	r3, r1, r3
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	00db      	lsls	r3, r3, #3
 8003f40:	3332      	adds	r3, #50	; 0x32
 8003f42:	4a67      	ldr	r2, [pc, #412]	; (80040e0 <UART_SetConfig+0x38c>)
 8003f44:	fba2 2303 	umull	r2, r3, r2, r3
 8003f48:	095b      	lsrs	r3, r3, #5
 8003f4a:	f003 0207 	and.w	r2, r3, #7
 8003f4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4432      	add	r2, r6
 8003f54:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f56:	e0b9      	b.n	80040cc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f5a:	461c      	mov	r4, r3
 8003f5c:	f04f 0500 	mov.w	r5, #0
 8003f60:	4622      	mov	r2, r4
 8003f62:	462b      	mov	r3, r5
 8003f64:	1891      	adds	r1, r2, r2
 8003f66:	6139      	str	r1, [r7, #16]
 8003f68:	415b      	adcs	r3, r3
 8003f6a:	617b      	str	r3, [r7, #20]
 8003f6c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003f70:	1912      	adds	r2, r2, r4
 8003f72:	eb45 0303 	adc.w	r3, r5, r3
 8003f76:	f04f 0000 	mov.w	r0, #0
 8003f7a:	f04f 0100 	mov.w	r1, #0
 8003f7e:	00d9      	lsls	r1, r3, #3
 8003f80:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f84:	00d0      	lsls	r0, r2, #3
 8003f86:	4602      	mov	r2, r0
 8003f88:	460b      	mov	r3, r1
 8003f8a:	eb12 0804 	adds.w	r8, r2, r4
 8003f8e:	eb43 0905 	adc.w	r9, r3, r5
 8003f92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f04f 0100 	mov.w	r1, #0
 8003f9c:	f04f 0200 	mov.w	r2, #0
 8003fa0:	f04f 0300 	mov.w	r3, #0
 8003fa4:	008b      	lsls	r3, r1, #2
 8003fa6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003faa:	0082      	lsls	r2, r0, #2
 8003fac:	4640      	mov	r0, r8
 8003fae:	4649      	mov	r1, r9
 8003fb0:	f7fc f90a 	bl	80001c8 <__aeabi_uldivmod>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	4b49      	ldr	r3, [pc, #292]	; (80040e0 <UART_SetConfig+0x38c>)
 8003fba:	fba3 2302 	umull	r2, r3, r3, r2
 8003fbe:	095b      	lsrs	r3, r3, #5
 8003fc0:	011e      	lsls	r6, r3, #4
 8003fc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f04f 0100 	mov.w	r1, #0
 8003fca:	4602      	mov	r2, r0
 8003fcc:	460b      	mov	r3, r1
 8003fce:	1894      	adds	r4, r2, r2
 8003fd0:	60bc      	str	r4, [r7, #8]
 8003fd2:	415b      	adcs	r3, r3
 8003fd4:	60fb      	str	r3, [r7, #12]
 8003fd6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fda:	1812      	adds	r2, r2, r0
 8003fdc:	eb41 0303 	adc.w	r3, r1, r3
 8003fe0:	f04f 0400 	mov.w	r4, #0
 8003fe4:	f04f 0500 	mov.w	r5, #0
 8003fe8:	00dd      	lsls	r5, r3, #3
 8003fea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003fee:	00d4      	lsls	r4, r2, #3
 8003ff0:	4622      	mov	r2, r4
 8003ff2:	462b      	mov	r3, r5
 8003ff4:	1814      	adds	r4, r2, r0
 8003ff6:	64bc      	str	r4, [r7, #72]	; 0x48
 8003ff8:	414b      	adcs	r3, r1
 8003ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	4618      	mov	r0, r3
 8004002:	f04f 0100 	mov.w	r1, #0
 8004006:	f04f 0200 	mov.w	r2, #0
 800400a:	f04f 0300 	mov.w	r3, #0
 800400e:	008b      	lsls	r3, r1, #2
 8004010:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004014:	0082      	lsls	r2, r0, #2
 8004016:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800401a:	f7fc f8d5 	bl	80001c8 <__aeabi_uldivmod>
 800401e:	4602      	mov	r2, r0
 8004020:	460b      	mov	r3, r1
 8004022:	4b2f      	ldr	r3, [pc, #188]	; (80040e0 <UART_SetConfig+0x38c>)
 8004024:	fba3 1302 	umull	r1, r3, r3, r2
 8004028:	095b      	lsrs	r3, r3, #5
 800402a:	2164      	movs	r1, #100	; 0x64
 800402c:	fb01 f303 	mul.w	r3, r1, r3
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	011b      	lsls	r3, r3, #4
 8004034:	3332      	adds	r3, #50	; 0x32
 8004036:	4a2a      	ldr	r2, [pc, #168]	; (80040e0 <UART_SetConfig+0x38c>)
 8004038:	fba2 2303 	umull	r2, r3, r2, r3
 800403c:	095b      	lsrs	r3, r3, #5
 800403e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004042:	441e      	add	r6, r3
 8004044:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004046:	4618      	mov	r0, r3
 8004048:	f04f 0100 	mov.w	r1, #0
 800404c:	4602      	mov	r2, r0
 800404e:	460b      	mov	r3, r1
 8004050:	1894      	adds	r4, r2, r2
 8004052:	603c      	str	r4, [r7, #0]
 8004054:	415b      	adcs	r3, r3
 8004056:	607b      	str	r3, [r7, #4]
 8004058:	e9d7 2300 	ldrd	r2, r3, [r7]
 800405c:	1812      	adds	r2, r2, r0
 800405e:	eb41 0303 	adc.w	r3, r1, r3
 8004062:	f04f 0400 	mov.w	r4, #0
 8004066:	f04f 0500 	mov.w	r5, #0
 800406a:	00dd      	lsls	r5, r3, #3
 800406c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004070:	00d4      	lsls	r4, r2, #3
 8004072:	4622      	mov	r2, r4
 8004074:	462b      	mov	r3, r5
 8004076:	eb12 0a00 	adds.w	sl, r2, r0
 800407a:	eb43 0b01 	adc.w	fp, r3, r1
 800407e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	4618      	mov	r0, r3
 8004084:	f04f 0100 	mov.w	r1, #0
 8004088:	f04f 0200 	mov.w	r2, #0
 800408c:	f04f 0300 	mov.w	r3, #0
 8004090:	008b      	lsls	r3, r1, #2
 8004092:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004096:	0082      	lsls	r2, r0, #2
 8004098:	4650      	mov	r0, sl
 800409a:	4659      	mov	r1, fp
 800409c:	f7fc f894 	bl	80001c8 <__aeabi_uldivmod>
 80040a0:	4602      	mov	r2, r0
 80040a2:	460b      	mov	r3, r1
 80040a4:	4b0e      	ldr	r3, [pc, #56]	; (80040e0 <UART_SetConfig+0x38c>)
 80040a6:	fba3 1302 	umull	r1, r3, r3, r2
 80040aa:	095b      	lsrs	r3, r3, #5
 80040ac:	2164      	movs	r1, #100	; 0x64
 80040ae:	fb01 f303 	mul.w	r3, r1, r3
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	011b      	lsls	r3, r3, #4
 80040b6:	3332      	adds	r3, #50	; 0x32
 80040b8:	4a09      	ldr	r2, [pc, #36]	; (80040e0 <UART_SetConfig+0x38c>)
 80040ba:	fba2 2303 	umull	r2, r3, r2, r3
 80040be:	095b      	lsrs	r3, r3, #5
 80040c0:	f003 020f 	and.w	r2, r3, #15
 80040c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4432      	add	r2, r6
 80040ca:	609a      	str	r2, [r3, #8]
}
 80040cc:	bf00      	nop
 80040ce:	377c      	adds	r7, #124	; 0x7c
 80040d0:	46bd      	mov	sp, r7
 80040d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040d6:	bf00      	nop
 80040d8:	40011000 	.word	0x40011000
 80040dc:	40011400 	.word	0x40011400
 80040e0:	51eb851f 	.word	0x51eb851f

080040e4 <__libc_init_array>:
 80040e4:	b570      	push	{r4, r5, r6, lr}
 80040e6:	4d0d      	ldr	r5, [pc, #52]	; (800411c <__libc_init_array+0x38>)
 80040e8:	4c0d      	ldr	r4, [pc, #52]	; (8004120 <__libc_init_array+0x3c>)
 80040ea:	1b64      	subs	r4, r4, r5
 80040ec:	10a4      	asrs	r4, r4, #2
 80040ee:	2600      	movs	r6, #0
 80040f0:	42a6      	cmp	r6, r4
 80040f2:	d109      	bne.n	8004108 <__libc_init_array+0x24>
 80040f4:	4d0b      	ldr	r5, [pc, #44]	; (8004124 <__libc_init_array+0x40>)
 80040f6:	4c0c      	ldr	r4, [pc, #48]	; (8004128 <__libc_init_array+0x44>)
 80040f8:	f000 f820 	bl	800413c <_init>
 80040fc:	1b64      	subs	r4, r4, r5
 80040fe:	10a4      	asrs	r4, r4, #2
 8004100:	2600      	movs	r6, #0
 8004102:	42a6      	cmp	r6, r4
 8004104:	d105      	bne.n	8004112 <__libc_init_array+0x2e>
 8004106:	bd70      	pop	{r4, r5, r6, pc}
 8004108:	f855 3b04 	ldr.w	r3, [r5], #4
 800410c:	4798      	blx	r3
 800410e:	3601      	adds	r6, #1
 8004110:	e7ee      	b.n	80040f0 <__libc_init_array+0xc>
 8004112:	f855 3b04 	ldr.w	r3, [r5], #4
 8004116:	4798      	blx	r3
 8004118:	3601      	adds	r6, #1
 800411a:	e7f2      	b.n	8004102 <__libc_init_array+0x1e>
 800411c:	08004194 	.word	0x08004194
 8004120:	08004194 	.word	0x08004194
 8004124:	08004194 	.word	0x08004194
 8004128:	08004198 	.word	0x08004198

0800412c <memset>:
 800412c:	4402      	add	r2, r0
 800412e:	4603      	mov	r3, r0
 8004130:	4293      	cmp	r3, r2
 8004132:	d100      	bne.n	8004136 <memset+0xa>
 8004134:	4770      	bx	lr
 8004136:	f803 1b01 	strb.w	r1, [r3], #1
 800413a:	e7f9      	b.n	8004130 <memset+0x4>

0800413c <_init>:
 800413c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800413e:	bf00      	nop
 8004140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004142:	bc08      	pop	{r3}
 8004144:	469e      	mov	lr, r3
 8004146:	4770      	bx	lr

08004148 <_fini>:
 8004148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800414a:	bf00      	nop
 800414c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800414e:	bc08      	pop	{r3}
 8004150:	469e      	mov	lr, r3
 8004152:	4770      	bx	lr
